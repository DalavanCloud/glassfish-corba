/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * 
 * Copyright (c) 1997-2010 Oracle and/or its affiliates. All rights reserved.
 * 
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common Development
 * and Distribution License("CDDL") (collectively, the "License").  You
 * may not use this file except in compliance with the License.  You can
 * obtain a copy of the License at
 * https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
 * or packager/legal/LICENSE.txt.  See the License for the specific
 * language governing permissions and limitations under the License.
 * 
 * When distributing the software, include this License Header Notice in each
 * file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
 * 
 * GPL Classpath Exception:
 * Oracle designates this particular file as subject to the "Classpath"
 * exception as provided by Oracle in the GPL Version 2 section of the License
 * file that accompanied this code.
 * 
 * Modifications:
 * If applicable, add the following below the License Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyright [year] [name of copyright owner]"
 * 
 * Contributor(s):
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding "[Contributor]
 * elects to include this software in this distribution under the [CDDL or GPL
 * Version 2] license."  If you don't indicate a single choice of license, a
 * recipient has the option to distribute your version of this file under
 * either the CDDL, the GPL Version 2 or to extend the choice of license to
 * its licensees as provided above.  However, if you add GPL Version 2 code
 * and therefore, elected the GPL Version 2 license, then the option applies
 * only if the new code is made subject to such option by the copyright
 * holder.
 */
package com.sun.corba.se.impl.encoding.fast.bytebuffer ;

class BufferWrapperImpl implements Allocator.BufferWrapper {
    private Allocator allocator ;
    private Slab Slab ;
    private int headerSize ;
    private int size ;

    private ByteBuffer backingStore ;
    private ByteBuffer visible ;

    BufferWrapperImpl( Allocator allocator, Slab space, int size ) {
        this.allocator = allocator ;
        this.slab = slab ;
        this.headerSIze = allocator.headerSize() ;
        this.size = size ;

        backingStore = slab.allocate( size + allocator.headerSize() ) ;
        backingStore.position( allocator.headerSize() ) ;
        visible = backingStore.slice() ;
    }

    public int headerSize() {
        return headerSize ;
    }

    public Allocator allocator() {
        return allocator ;
    }

    public ByteBuffer buffer() {
        return visible ;
    }

    public void reset() {
        visible.position( 0 ) ;
    }

    public int remaining() {
        return visible.remaining() ;
    }

    public void prepend( ByteBuffer header ) {
        if (header.remaining() <= headerSize) {
            // use reserved space.  Note that this updates headerSize!
            int startPosition = backingStore.position() - header.remaining() ;
            backingStore.position( startPosition ) ;
            backingStore.put( header ) ;
            backingStore.position( startPosition ) ;
            headerSize -= header.remaining() ;
        } else {
            // copy everything into a new ByteBufferImpl
            int newSize = header.remaining() + visible.remaining() ;
            BufferWrapperImpl space = allocator.allocate( newSize + allocator.headerSize() ) ;
            space.position( allocator.headerSize() ) ;
            space.buffer().put( header ) ;
            space.buffer().put( visible ) ;

            allocator.dispose( slab, backingStore ) ;

            backingStore = space.backingStore ;
            slab = space.slab ;
            size = space.size ;
            headerSize = space.headerSize ;
        }

        visible = backingStore.slice() ;
    }

    public void trim() {
        ByteBuffer result = slab.trim( backingStore ) ;
        if (result != backingStore) {
            visible = backingStore.slice() ;
        }
    }

    public void dispose() {
        allocator.dispose( slab, backingStore ) ;
    }
}

