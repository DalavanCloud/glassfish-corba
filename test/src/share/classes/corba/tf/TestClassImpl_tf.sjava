/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * 
 * Copyright (c) 2011-2011 Oracle and/or its affiliates. All rights reserved.
 * 
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common Development
 * and Distribution License("CDDL") (collectively, the "License").  You
 * may not use this file except in compliance with the License.  You can
 * obtain a copy of the License at
 * https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
 * or packager/legal/LICENSE.txt.  See the License for the specific
 * language governing permissions and limitations under the License.
 * 
 * When distributing the software, include this License Header Notice in each
 * file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
 * 
 * GPL Classpath Exception:
 * Oracle designates this particular file as subject to the "Classpath"
 * exception as provided by Oracle in the GPL Version 2 section of the License
 * file that accompanied this code.
 * 
 * Modifications:
 * If applicable, add the following below the License Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyright [year] [name of copyright owner]"
 * 
 * Contributor(s):
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding "[Contributor]
 * elects to include this software in this distribution under the [CDDL or GPL
 * Version 2] license."  If you don't indicate a single choice of license, a
 * recipient has the option to distribute your version of this file under
 * either the CDDL, the GPL Version 2 or to extend the choice of license to
 * its licensees as provided above.  However, if you add GPL Version 2 code
 * and therefore, elected the GPL Version 2 license, then the option applies
 * only if the new code is made subject to such option by the copyright
 * holder.
 */

package corba.tf;

import com.sun.corba.se.spi.orbutil.generic.SynchronizedHolder;
import com.sun.corba.se.spi.orbutil.tf.MethodMonitor;
import com.sun.corba.se.spi.orbutil.tf.MethodMonitorRegistry;
import com.sun.corba.se.spi.orbutil.tf.annotation.InfoMethod;
import java.lang.annotation.Annotation;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Hand-written example of trace enhancer modifications to an annotated trace-enabled class.
 *
 * @author ken
 */
@A @B @C
public class TestClassImpl_tf implements TestClass {
    // Set-up for tracing facility (generated)
    private static final SynchronizedHolder<MethodMonitor> __mmA =
        new SynchronizedHolder<MethodMonitor>() ;
    private static final SynchronizedHolder<MethodMonitor> __mmB =
        new SynchronizedHolder<MethodMonitor>() ;
    private static final SynchronizedHolder<MethodMonitor> __mmC =
        new SynchronizedHolder<MethodMonitor>() ;

    static {
        Class<?> thisClass = TestClassImpl_tf.class ;

        final List<String> __mnames = new ArrayList<String>() ;
        __mnames.add( "increment" ) ;
        __mnames.add( "decrement" ) ;
        __mnames.add( "if0" ) ;
        __mnames.add( "if1" ) ;
        __mnames.add( "add" ) ;
        __mnames.add( "mult" ) ;
        __mnames.add( "bigAddValue" ) ;
        __mnames.add( "bigMultValue" ) ;

        final Map<Class<? extends Annotation>,SynchronizedHolder<MethodMonitor>> __classToMMH =
            new HashMap<Class<? extends Annotation>,SynchronizedHolder<MethodMonitor>>() ;

        __classToMMH.put( A.class, __mmA ) ;
        __classToMMH.put( B.class, __mmB ) ;
        __classToMMH.put( C.class, __mmC ) ;

        MethodMonitorRegistry.registerClass( thisClass, __mnames, __classToMMH );
    }
    // end of set-up

    @A
    long increment( long x ) {
        long __result = 0 ;
        final MethodMonitor __mm = __mmA.content() ;

        if (__mm != null) {
            __mm.enter( 0, x ) ;
        }

        try {
            __result = x + 1 ;
        } finally {
            if (__mm != null) {
                __mm.exit( 0, __result ) ;
            }
        }

        return __result ;
    }

    @A
    long decrement( long x ) {
        long __result = 0 ;
        final MethodMonitor __mm = __mmA.content() ;

        if (__mm != null) {
            __mm.enter( 1, x ) ;
        }

        try {
            __result = x - 1 ;
        } finally {
            if (__mm != null) {
                __mm.exit( 1, __result ) ;
            }
        }

        return __result ;
    }

    @A
    boolean is0( long x ) {
        boolean __result = false ;
        final MethodMonitor __mm = __mmA.content() ;

        if (__mm != null) {
            __mm.enter( 2, x ) ;
        }

        try {
            __result = x==0 ;
        } finally {
            if (__mm != null) {
                __mm.exit( 2, __result ) ;
            }
        }

        return __result ;
    }

    @A
    boolean is1( long x ) {
        boolean __result = false ;
        final MethodMonitor __mm = __mmA.content() ;

        if (__mm != null) {
            __mm.enter( 3, x ) ;
        }

        try {
            __result = x==1 ;
        } finally {
            if (__mm != null) {
                __mm.exit( 3, __result ) ;
            }
        }

        return __result ;
    }

    @InfoMethod
    private void bigAddValue( String msg, long value, 
        MethodMonitor __mm, int __callerId ) {
        if (__mm != null) {
            Object[] args = new Object[2] ;
            args[0] = msg ;
            args[1] = value ;
            __mm.info( args, __callerId, 6 ) ;
        }
    }

    @InfoMethod
    private void bigMultValue( String msg, long value,
        MethodMonitor __mm, int __callerId ) {
        if (__mm != null) {
            Object[] args = new Object[2] ;
            args[0] = msg ;
            args[1] = value ;
            __mm.info( args, __callerId, 7 ) ;
        }
    }

    @B
    public long add( long a, long b ) {
        long __result = 0 ;  
        final MethodMonitor __mm = __mmB.content() ;

        if (__mm != null) {
            __mm.enter( 4, a, b ) ;
        }

        try {
            if ((a<0) || (b<0)) {
                RuntimeException exc = new RuntimeException( "Negative not supported" ) ;
                if (__mm != null) {
                    __mm.exception( 4, exc ) ;
                }
                throw exc ;
            }

            if (is0(b)) {
                return __result = a ;
            } else {
                if (b > 100) {
                    bigAddValue( "Large argument for add", b, 
                        __mm, 6 ) ;
                }

                return __result = add( increment(a), decrement(b) ) ;
            }
        } finally {
            if (__mm != null) {
                __mm.exit( 4, __result ) ;
            }
        }
    }

    @C
    public long mult( long a, long b ) {
        long __result = 0 ;
        final MethodMonitor __mm = __mmC.content() ;

        if (__mm != null) {
            __mm.enter( 5, a, b ) ;
        }

        try {
            if ((a<0) || (b<0)) {
                RuntimeException exc = new RuntimeException( "Negative not supported" ) ;
                if (__mm != null) {
                    __mm.exception( 5, exc ) ;
                }
                throw exc ;
            }

            if (is0(b)) {
                __result = 0 ;
            } else if (is1(b)) {
                __result = a ;
            } else {
                if (b > 10) {
                    bigMultValue( "Large argument for mult", b,
                        __mm, 5 ) ;
                }

                __result = add( a, mult( a, decrement(b) )) ;
            }
        } finally {
            if (__mm != null) {
                __mm.exit( 5, __result ) ;
            }
        }

        return __result ;
    }
}
