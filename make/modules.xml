<?xml version="1.0" encoding="iso-8859-1"?>

<!--
  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
  
  Copyright (c) 1997-2011 Oracle and/or its affiliates. All rights reserved.
  
  The contents of this file are subject to the terms of either the GNU
  General Public License Version 2 only ("GPL") or the Common Development
  and Distribution License("CDDL") (collectively, the "License").  You
  may not use this file except in compliance with the License.  You can
  obtain a copy of the License at
  https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
  or packager/legal/LICENSE.txt.  See the License for the specific
  language governing permissions and limitations under the License.
  
  When distributing the software, include this License Header Notice in each
  file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
  
  GPL Classpath Exception:
  Oracle designates this particular file as subject to the "Classpath"
  exception as provided by Oracle in the GPL Version 2 section of the License
  file that accompanied this code.
  
  Modifications:
  If applicable, add the following below the License Header, with the fields
  enclosed by brackets [] replaced by your own identifying information:
  "Portions Copyright [year] [name of copyright owner]"
  
  Contributor(s):
  If you wish your version of this file to be governed by only the CDDL or
  only the GPL Version 2, indicate your decision by adding "[Contributor]
  elects to include this software in this distribution under the [CDDL or GPL
  Version 2] license."  If you don't indicate a single choice of license, a
  recipient has the option to distribute your version of this file under
  either the CDDL, the GPL Version 2 or to extend the choice of license to
  its licensees as provided above.  However, if you add GPL Version 2 code
  and therefore, elected the GPL Version 2 license, then the option applies
  only if the new code is made subject to such option by the copyright
  holder.
-->

<project name="modules" basedir=".." xmlns:artifact="antlib:org.apache.maven.artifact.ant"> <!-- What should basedir be? -->
    <target name="init">
        <!-- set up the maven ant tasks -->
        <property name="maven.ant.file"         value="maven-ant-tasks-2.0.10.jar"/>
        <path id="maven-ant-tasks.classpath" path="${root.dir}/lib/${maven.ant.file}"/>
        <typedef resource="org/apache/maven/artifact/ant/antlib.xml" 
            uri="antlib:org.apache.maven.artifact.ant" 
            classpathref="maven-ant-tasks.classpath">
        </typedef>

        <!-- wagon-svn is needed to push artifacts to maven -->
        <artifact:install-provider artifactId="wagon-svn"
         groupId="org.jvnet.wagon-svn" version="1.7">
            <artifact:remoteRepository id="java.net.maven2.repository"
             url="http://download.java.net/maven/2/" />
        </artifact:install-provider> 

        <!-- We need bnd internally -->
        <artifact:dependencies pathId="bnd.classpath">
            <remoteRepository id="bnd.repository"
             url="http://www.aqute.biz/repo"/>
            <dependency groupId="biz.aQute" 
                artifactId="bnd"
                version="0.0.401" scope="compile"/>
        </artifact:dependencies>
    </target>

    <macrodef name="get-and-copy-dependencies">
        <attribute name="name" default=""/>
        <attribute name="repository" default=""/>
        <attribute name="destDir" default=""/>
        <element name="dependency-list" optional="no"/>
        <sequential>
            <echo message="get-and-copy-dependencies: name=@{name} repository=@{repository} destDir=@{destDir}"/>
            <artifact:dependencies versionsId="@{name}.versions"
                filesetId="@{name}.fileset" pathId="@{name}.classpath">
               <remoteRepository id="@{name}.repid" url="@{repository}"/>
               <dependency-list/>
            </artifact:dependencies>

            <mkdir dir="@{destDir}"/>
            <copy todir="@{destDir}">
                <fileset refid="@{name}.fileset"/>
                <mapper classpathref="maven-ant-tasks.classpath" 
                    classname="org.apache.maven.artifact.ant.VersionMapper"
                    from="${@{name}.versions}" to="flatten"/>
            </copy>
        </sequential>
    </macrodef>

    <!-- ================== OSGi bundle support ======================= -->


    <scriptdef name="make-bundle-file" language="javascript">
	<attribute name="version"/>
	<attribute name="outfile"/>
	<element name="directive" classname="org.apache.tools.ant.types.Parameter"/>
	<![CDATA[
	    function openFile( name ) {
		var fos = new java.io.FileOutputStream( name ) ;
		var osw = new java.io.OutputStreamWriter( fos ) ;
		var writer = new java.io.BufferedWriter( osw ) ;
		return writer ;
	    }

	    function writeString( file, str ) {
	        file.write( str, 0, str.length ) ;
		file.newLine() ;
	    }

	    function convert( object ) {
		if (object==null) {
		    return null ;
		}

		var res = object.toString() ;
		if (res.startsWith( "[" )) {
		    var flag = true ;
		    res = "" ;
		    for (var ctr=0; ctr<object.length; ctr++) {
		        if (flag) {
			    flag = false ;
			} else {
			    res += ", " ;
			}
			res += convert( object[ctr] ) ;
		    }
		} 
		return res ;
	    }

	    var version = attributes.get("version") ; 
	    var outfile = attributes.get("outfile") ; 

	    // Write out the bnd control file

	    var file = openFile( outfile ) ;

	    try {
		writeString( file, "Bundle-Version=" + version ) ;
		var directives = elements.get("directive") ;
		for (var ctr = 0; ctr<directives.size(); ctr++) {
		    var directive = directives.get(ctr) ;
		    var type = directive.getType() ;
		    var name = directive.getName() ;
		    var value = directive.getValue() ;
		    // self.log( "directives[" + ctr + "]:" ) ;
		    // self.log( "\ttype=" + directive.getType() ) ;
		    // self.log( "\tname=" + directive.getName() ) ;
		    // self.log( "\tvalue=" + convert( directive.getValue() ) ) ;
		    var content = null ;
		    if (name==null) {
			content = value ;
		    } else {
			content = project.references.get( name ) ;
			if (content == null) {
			    throw new Error( "Content for type " + type + " is null" ) ; 
			} else {
			    content = content.getIncludePatterns( project ) ;
			}
		    }
		    // self.log( "\tcontent=" + convert( content ) ) ;
		    writeString( file, type + ": " + convert( content ) ) ;
		}
	    } finally {
		file.close() ;
	    }
	]]>
    </scriptdef>

    <macrodef name="make-bundle">
	<attribute name="version"/>
	<attribute name="classpath"/>
	<attribute name="outDir"/>
	<attribute name="outFile"/>
	<element name="directive-list"/>
	<sequential>
	    <make-bundle-file version="@{version}" outfile="bndfile.temp">
		<directive-list/>
	    </make-bundle-file>
	
	    <!-- Use bnd to generate the bundle jar file. -->

	    <java classpathref="bnd.classpath" classname="aQute.bnd.main.bnd" 
		fork="true" failonerror="true">

		<arg value="build"/>
		<arg value="-noeclipse"/>
		<arg value="-classpath"/>
		<arg value="@{classpath}"/>
		<arg value="-output"/>
		<arg value="@{outDir}/@{outFile}.jar"/>
		<arg value="make/bndfile.temp"/>
	    </java>

	    <delete file="bndfile.temp"/>
	</sequential>
    </macrodef>	

    <!-- Pushing artifacts to maven

    Variables in templates:
        groupId         always com.sun.corba
        jarName         the name of the jar file (glassfish-corba-<module>)
        version         the current CORBA version
        jarDescription  a brief description of the jar contents
        HEADER-@{module} the expanded version of make/pom/header.xml inserted 
                        into the pom file. Note that all properties must have
                        unique names.  Ant is COMPLETELY
                        braindead: see Greenberg's 10th law.

    naming conventions:
    The modules             (and their dependencies):
        asm                 -
        orbgeneric          -
        codegen             asm orbgeneric
        omgapi              -
        internal-api        -
        csiv2-idl           omgapi
        newtimer            orbgeneric codegen 
        orb                 codegen newtimer omgapi orbgeneric

        for each module m:
            bnd file:           ${root.dir}/make/bnd/gflassfish-corba-${m}.bnd
            pom template:       ${root.dir}/make/pom/${m}.template.pom
            resulting jar:      ${releaselib.dir}/bundles/glassfish-corba-${m}.jar
    -->

    <macrodef name="make-file">
        <attribute name="module"/>
        <attribute name="description"/>
        <sequential>
            <loadfile property="HEADER-@{module}"
             srcFile="make/pom/header.xml">
                <filterchain>
                    <replacetokens>
                        <token key="artifactId"
                         value="glassfish-corba-@{module}"/>
                        <token key="version" value="${orb.version}"/>
                        <token key="jarDescription" value="@{description}"/>
                        <token key="groupId" value="${orb.groupId}"/>
                        <token key="repositoryUrl" value="${repo.url}"/>
                    </replacetokens>
                </filterchain>
            </loadfile>
            <copy file="make/pom/@{module}.template.xml"
             tofile="make/corba.temp.pom" overwrite="true">
                <filterset>
                  <filter token="HEADER" value="${HEADER-@{module}}"/>
                  <filter token="version" value="${orb.version}"/>
                  <filter token="groupId" value="${orb.groupId}"/>
                </filterset>
            </copy>
        </sequential>
    </macrodef>

    <!--  
    Note that we use a temporary file to store the pom because maven is based 
    on 'single project produces single jar file'. But, we are producing 9 jars
    from a single project. Hence, we need a template to for each pom that
    generates the POM we use each time we publish.

    Refer: http://maven.apache.org/guides/mini/guide-using-one-source-directory.html
    Section: Producing Multiple JARs from a single POM (maven limitations)

    For some reason, artifact:deploy stopped working to deploy to ~/.m2/repository.
    Once again, ant reveals its weakness, and I can't find a way to avoid the code
    duplication below.
    -->

    <macrodef name="push-to-local-maven">
        <attribute name="module"/>
        <attribute name="description"/>
        <sequential>
            <echo message="Releasing module @{module} (@{description}) to @{destination}"/>
            <make-file module="@{module}" description="@{description}"/>

            <artifact:pom id="glassfish.corba.project" file="make/corba.temp.pom" />
            <artifact:install file="${releaselib.dir}/bundles/glassfish-corba-@{module}.jar">
                <pom refid="glassfish.corba.project"/>
            </artifact:install>
            <delete file="make/corba.temp.pom" verbose="true"/>
        </sequential>
    </macrodef>

    <macrodef name="push-to-maven">
        <attribute name="module"/>
        <attribute name="description"/>
        <attribute name="destination"/>
        <sequential>
            <mkdir dir="make/gen/pom"/>
            <echo message="Releasing module @{module} (@{description}) to @{destination}"/>
            <make-file module="@{module}" description="@{description}"/>

            <artifact:pom id="glassfish.corba.project"
             file="make/corba.temp.pom" />
            <artifact:deploy file="${releaselib.dir}/bundles/glassfish-corba-@{module}.jar">
                <remoteRepository url="@{destination}">
                    <authentication id="java.net.maven2.repository"/>
                </remoteRepository>
                <pom refid="glassfish.corba.project"/>
            </artifact:deploy>
            <move file="make/corba.temp.pom" todir="make/gen/pom"/>
            <move file="make/gen/pom/corba.temp.pom" tofile="glassfish-corba-@{module}.pom"/>
            <!-- <delete file="make/corba.temp.pom" verbose="true"/> -->
        </sequential>
    </macrodef>

    <macrodef name="release-to-maven">
        <attribute name="destination"/>
        <sequential>
            <echo message="Releasing modules with version ${orb.version} to @{destination}"/>
            <push-to-maven destination="@{destination}" module="asm" 
             description="ASM version used in the ORB"/>
            <push-to-maven destination="@{destination}" module="codegen" 
             description="Dynamic code generation library"/>
            <push-to-maven destination="@{destination}" module="csiv2-idl"
             description="IDL generated definitions for CSIv2"/>
            <push-to-maven destination="@{destination}" module="internal-api"
             description="Non-standard ORB API classes for transactions and IIOP FOLB"/>
            <push-to-maven destination="@{destination}" module="newtimer"
             description="ORB timer library"/>
            <push-to-maven destination="@{destination}" module="omgapi"
             description="OMG standard APIs"/>
            <push-to-maven destination="@{destination}" module="orb"
             description="The ORB implementation"/>
            <push-to-maven destination="@{destination}" module="orbgeneric"
             description="Generic libraries"/>
            <push-to-maven destination="@{destination}" module="source"
             description="ORB source code"/>
        </sequential>
    </macrodef>

    <macrodef name="release-to-local-maven">
        <sequential>
            <echo message="Releasing modules with version ${orb.version} to @{destination}"/>
            <push-to-local-maven module="asm" description="ASM version used in the ORB"/>
            <push-to-local-maven module="codegen" description="Dynamic code generation library"/>
            <push-to-local-maven module="csiv2-idl" description="IDL generated definitions for CSIv2"/>
            <push-to-local-maven module="internal-api" description="Non-standard ORB API classes for transactions and IIOP FOLB"/>
            <push-to-local-maven module="newtimer" description="ORB timer library"/>
            <push-to-local-maven module="omgapi" description="OMG standard APIs"/>
            <push-to-local-maven module="orb" description="The ORB implementation"/>
            <push-to-local-maven module="orbgeneric" description="Generic libraries"/>
            <push-to-local-maven module="source" description="ORB source code"/>
        </sequential>
    </macrodef>

</project>
