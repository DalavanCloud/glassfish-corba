<?xml version="1.0" encoding="iso-8859-1"?>

<!--
  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 
  Copyright 2003-2007 Sun Microsystems, Inc. All rights reserved.
 
  The contents of this file are subject to the terms of either the GNU
  General Public License Version 2 only ("GPL") or the Common Development
  and Distribution License("CDDL") (collectively, the "License").  You
  may not use this file except in compliance with the License. You can obtain
  a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html
  or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific
  language governing permissions and limitations under the License.
 
  When distributing the software, include this License Header Notice in each
  file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
  Sun designates this particular file as subject to the "Classpath" exception
  as provided by Sun in the GPL Version 2 section of the License file that
  accompanied this code.  If applicable, add the following below the License
  Header, with the fields enclosed by brackets [] replaced by your own
  identifying information: "Portions Copyrighted [year]
  [name of copyright owner]"
 
  Contributor(s):
 
  If you wish your version of this file to be governed by only the CDDL or
  only the GPL Version 2, indicate your decision by adding "[Contributor]
  elects to include this software in this distribution under the [CDDL or GPL
  Version 2] license."  If you don't indicate a single choice of license, a
  recipient has the option to distribute your version of this file under
  either the CDDL, the GPL Version 2 or to extend the choice of license to
  its licensees as provided above.  However, if you add GPL Version 2 code
  and therefore, elected the GPL Version 2 license, then the option applies
  only if the new code is made subject to such option by the copyright
  holder.
-->

<!-- Note that the paths to the entities here MUST be relative URIs -->
<!-- Otherwise NetBeans will not be able to import this project.    -->
<!-- In particular, do NOT use things like file:./src-idl.xml, as   -->
<!-- relative file URIs only work if netbeans is started in this    -->
<!-- directory.                                                     -->
<!DOCTYPE project [
  <!ENTITY src-idl SYSTEM "src-idl.xml">
  <!ENTITY jscheme SYSTEM "jscheme.xml">
  <!ENTITY test-idl SYSTEM "test-idl.xml">
  <!ENTITY test-rmic SYSTEM "test-rmic.xml">
  <!ENTITY test SYSTEM "test.xml">
  <!ENTITY emma SYSTEM "emma.xml">
  <!ENTITY maven SYSTEM "push2maven.xml">
]>

<!--
    The source code is divided into 3 areas:
    orb-library:
	Contents: Contains libraries that can be used independently of the ORB.
	    This includes the codegen library, the timing facility, an
	    FSM library, and a number of generic utilities.  This also includes
	    a copy of the ASM library from ObjectWeb.  
	Dependencies: May not depend on classes from any other area.  
	Delivery: Delivered in orblib.jar
    main:
	Contents: The core of the ORB.
	Dependencies: Depends only on orb-library.
	Delivery: peorb.jar
    experimental:
	Contents: experimental code not fully finished or delivered.
	Depencies: Depends only on orb-library at present.
	Deliver: not delivered.
-->

<project name="GlassFish CORBA" default="all" basedir=".." xmlns:artifact="urn:maven-artifact-ant">
    <description>
	This is the Ant file that builds the PEORB.
    </description>


    <!-- =================== START HERE =================================== -->
    <target name="build" depends="init, prepare-dirs, compile, create-jars"/>

    <target name="init">
        <property file="make/build.properties"/>
        <echo message="Version is ${release.version}-${build.version}"/>
        <!-- environmental dependencies -->
        <property environment="env"/>
        <property name="java.home"                  value="${env.JAVA_HOME}"/>
        <echo message="java.home=${java.home}"/> <!-- Why does this end in jre? -->

        <property name="root.dir"			value="${basedir}"/>

        <!-- Required JAR files -->
        <property name="tools-jar"			value="${java.home}/../lib/tools.jar"/>
        <property name="rt.jar"			        value="${java.home}/lib/rt.jar"/>
        <property name="emma-jar"			value="${root.dir}/lib/emma.jar"/>
        <property name="jscheme-jar"		        value="${root.dir}/lib/jscheme.jar"/>
        <property name="jschemelogutil-jar"		value="${root.dir}/lib/jschemelogutil.jar"/>
        <property name="javatest-jar"		        value="${root.dir}/lib/javatest.jar"/>
        <property name="ejb-jar"			value="${root.dir}/lib/ejb-2_1-api.jar"/>
        <property name="junit-jar"			value="${root.dir}/lib/ant-junit.jar"/>
        <property name="ant-junit-jar"		        value="${root.dir}/lib/junit.jar"/>
        <property name="jmxri-jar"			value="${root.dir}/lib/jmxri.jar"/>
        <property name="testng-jar"			value="${root.dir}/lib/testng.jar"/>
        <property name="japex-jar"			value="${root.dir}/lib/japex.jar"/>
        <property name="bnd-jar"                        value="${root.dir}/lib/bnd.jar"/>


        <!-- Places where the build puts things -->
	<property name="build.dir"                      location="build"/>
	<property name="findbugs.dir"                   location="build/findbugs"/>
	<property name="gensrc.dir"                     location="${build.dir}/gensrc"/>
	<property name="lib.dir"                        location="${build.dir}/lib"/>
	<property name="classes.dir"                    location="${build.dir}/classes"/>

	<property name="releaselib.dir"                 location="${build.dir}/release/lib"/>   

        <!-- ORB library build directories -->
	<property name="orblib.src.dir"                 location="orblib/src/share/classes"/>
	<property name="orblib.build.dir"               location="orblib/build"/>
	<property name="orblib.classes.dir"             location="${orblib.build.dir}/classes"/>

        <!-- Main ORB build directories -->
        <property name="src.dir"		        value="src/share/classes"/>
        <property name="test.src.dir"	    	        value="test/src/share/classes"/>
        <property name="javadoc.dir"		        value="www/javadoc"/>
        <property name="build.sysclasspath"	        value="ignore"/>

        <!-- experimental files -->
        <property name="experimentalsrc.dir"		value="experimental/src/share/classes"/>
        <property name="experimentalgensrc.dir"		value="experimental/build/gensrc"/>
        <property name="experimentaltest.src.dir"	value="experimental/test/src/share/classes"/>
        <property name="experimentalclasses.dir"	value="experimental/build/classes"/>
        <property name="experimentaltestclasses.dir"	value="experimental/test/build/classes"/>

        <!-- ORB Test directories -->
        <property name="test.run.base"                  value="test/run"/>
        <property name="test.output"		        value="${test.run.base}/gen"/>
        <property name="junit.reports"		        value="${test.run.base}/junitreports"/>
	<property name="test-build.dir"                 location="test/build"/>
	<property name="test-classes.dir"               location="${test-build.dir}/classes"/>
	<property name="test-values1.dir"               location="${test-build.dir}/values1/classes"/>
	<property name="test-values2.dir"               location="${test-build.dir}/values2/classes"/>
	<property name="test-gensrc.dir"                location="${test-classes.dir}/gensrc"/>

        <!-- Emma related -->
	<property name="emma.dir"                       value="build/coverage"/>
	<property name="emma.classes.dir"               location="${emma.dir}/classes"/>
	<property name="emma.metadata.file"             location="${emma.dir}/coverage.em"/>

        <!-- javac flags -->
        <property name="deprecation"                    value="off"/>
        <property name="javac.optimize"		        value="false"/>
        <property name="javac.debug"		        value="true"/>

        <!-- Findbugs related -->
        <property name="findbugs.home"		        value="${root.dir}/lib/findbugs-1.3.3"/>
	<property name="findbugs.exclude.file"          value="${root.dir}/make/findbugs-filter.xml"/>
        
	<!-- properties needed for updating and validating copyright headers -->
	<property name="copyright.file"                 value="${root.dir}/make/copyright-information/copyright.txt"/>
	<property name="copyright.roots"                value="experimental,lib,make,nbproject,orblib,src,test,tools,www"/> 
	<property name="copyright.skip"                 value="SCCS,.hg,.cvs,Codemgr_wsdata,deleted_files,copyright-information,freezepoint,apache,objectweb,build,webrev,test-output,gen,lib"/>

        <!-- properties needed for pushing jar to maven repository -->
        <property name="release.dir"                    value="build/release"/>
        <property name="release.orb.jar"                value="${release.dir}/glassfish-corba.jar"/>
        <property name="orb.maven_repository_importer.version" value="1.1"/>
        <property name="glassfish.cvsroot"              value=":pserver:${glassfish.cvs.username}@cvs.dev.java.net:/cvs"/>
        <property name="orb.version"                    value="${release.version}-${build.version}"/>
        <property name="orb.groupId"                    value="com.sun.corba"/>
        <property name="maven.ant.file"                 value="maven-ant-tasks-2.0.9.jar"/>
        <property name="maven.ant.dir"                  value="http://apache.hoxt.com/maven/binaries"/>
        <property name="repo.url"                       value="java-net:/maven2-repository/trunk/www/repository"/>
        <property name="file.url"                       value="file:/tmp/maven"/>
        <property name="bundle.name.prefix"             value="glassfish-corba-"/>

	<path id="classpath.master">
	    <pathelement location="${emma.classes.dir}"/>
	    <pathelement location="${orblib.classes.dir}"/>
	    <pathelement location="${classes.dir}"/>
	    <pathelement location="${tools-jar}"/>
	    <pathelement location="${emma-jar}"/>
	</path>

	<path id="test-classpath.master">
            <path refid="classpath.master"/>

	    <pathelement location="${jscheme-jar}"/>
	    <pathelement location="${jschemelogutil-jar}"/>
	    <pathelement location="${ant-junit-jar}"/>
	    <pathelement location="${junit-jar}"/>
	    <pathelement location="${ejb-jar}"/>
	    <pathelement location="${testng-jar}"/>
	    <pathelement location="${japex-jar}"/>
	    <pathelement location="${test-classes.dir}"/>
	    <pathelement location="${test-gensrc.dir}"/>
	    <pathelement location="${test.output}"/>
	    <pathelement location="${test-values1.dir}"/>
	    <pathelement location="${test.src.dir}"/>
	    <pathelement location="${experimentalclasses.dir}"/>
	    <pathelement location="${experimentaltestclasses.dir}"/>
	</path>

	<pathconvert property="test.source.path">
	    <path>
		<pathelement location="${src.dir}"/>
		<pathelement location="${test.src.dir}"/>
		<pathelement location="${test.output}"/>
	    </path>
	</pathconvert>
    </target>

    <!-- ========================= PREPARE-DIRS ========================= -->
    <!-- Creates the necessary directories -->
    <target name="prepare-dirs" depends="init">
	<mkdir dir="${build.dir}"/>
	<mkdir dir="${orblib.classes.dir}"/>
	<mkdir dir="${lib.dir}"/>
	<mkdir dir="${gensrc.dir}"/>
	<mkdir dir="${classes.dir}"/>
	<mkdir dir="${releaselib.dir}"/>
	<mkdir dir="${releaselib.dir}/bundles"/>
	<mkdir dir="${test-classes.dir}"/>
	<mkdir dir="${test-values1.dir}"/>
	<mkdir dir="${test-values2.dir}"/>
	<mkdir dir="${test-gensrc.dir}"/>
    </target>

    <!-- ========================= COMPILE ========================= -->
    <target name="compile" depends="init, prepare-dirs, orb-library, compile-idl-compiler, run-all-idl, run-all-jscheme, generate-timing-points, delete-java-sources, copy-resources">
	<echo message="Compiling ORB sources"/>
	<javac destdir="${classes.dir}" 
		classpathref="classpath.master"
		deprecation="${deprecation}"
		debug="${javac.debug}" 
		optimize="${javac.optimize}"
	       	failonerror="true"
		fork="true"
		memoryMaximumSize="512m"> 
	    <src path="${src.dir}"/>
	    <src path="${gensrc.dir}"/>
	    <include name="org/omg/**"/>
	    <exclude name="org/omg/PortableInterceptor/UNKNOWN.java"/>
	    <include name="com/sun/corba/se/org/omg/**"/>
	    <exclude name="com/sun/corba/se/org/omg/CORBA/**"/>
	    <include name="javax/rmi/**"/>
	    <include name="javax/transaction/**"/>
	    <include name="javax/activity/**"/>
	    <include name="com/sun/corba/se/internal/**"/>
	    <include name="com/sun/corba/se/pept/**"/>
	    <include name="com/sun/corba/se/spi/**"/>
	    <include name="com/sun/corba/se/impl/**"/>
	    <include name="com/sun/corba/se/impl/**"/>
	    <include name="com/sun/corba/se/tool/**"/>
	    <include name="sun/corba/**"/>
	    <include name="sun/rmi/rmic/**"/>
	    <compilerarg value="-Xlint:-unchecked,-deprecation,-fallthrough,path,-serial,finally"/>
	    <compilerarg value="-Xbootclasspath/p:${classes.dir}:${orblib.classes.dir}"/>
	</javac>
    </target>

    <!-- ========================= COPY-RESOURCES ========================= -->
    <target name="copy-resources" depends="init">
	<echo message="Copying resources files"/>
	<copy todir="${classes.dir}" overwrite="false">
	    <fileset dir="${src.dir}">
		<include name="com/sun/corba/se/impl/orbutil/resources/sunorb.properties"/>
		<include name="sun/rmi/rmic/resources/rmic.properties"/>
	    </fileset>
	    <fileset dir="${gensrc.dir}">
		<include name="com/sun/corba/se/impl/logging/LogStrings.properties"/>
	    </fileset>
	</copy>
	<copy todir="${classes.dir}" flatten="true" overwrite="false">
	    <fileset dir="${src.dir}">
		<include name="com/sun/corba/se/impl/presentation/rmi/jndi.properties"/>
	    </fileset>
	</copy>
    </target>

    <!-- ========================= DELETE-JAVA-SOURCE ===================== -->
    <target name="delete-java-sources" depends="init">
	<!-- Delete duplicate files and unwanted files. -->
	<delete>
	    <fileset dir="${gensrc.dir}">
		<include name="org/omg/CORBA/OctetSeqHolder.java"/>
		<include name="org/omg/CORBA/OctetSeqHelper.java"/>
		<include name="org/omg/CORBA/RepositoryIdHelper.java"/>
		<include name="org/omg/CORBA/PolicyError.java"/>

		<include name="org/omg/Dynamic/ContextListHelper.java"/>
		<include name="org/omg/Dynamic/ExceptionListHelper.java"/>
		<include name="org/omg/Dynamic/ExceptionListHolder.java"/>
		<include name="org/omg/Dynamic/ParameterHelper.java"/>
		<include name="org/omg/Dynamic/ParameterHolder.java"/>
		<include name="org/omg/Dynamic/ParameterListHelper.java"/>
		<include name="org/omg/Dynamic/ParameterListHolder.java"/>
		<include name="org/omg/Dynamic/RequestContextHelper.java"/>
		<include name="org/omg/DynamicAny/DynAnyFactoryPOA.java"/>
		<include name="org/omg/DynamicAny/DynAnyFactoryPackage/InconsistentTypeCodeHolder.java"/>
		<include name="org/omg/DynamicAny/DynAnyPOA.java"/>
		<include name="org/omg/DynamicAny/DynAnyPackage/InvalidValueHolder.java"/>
		<include name="org/omg/DynamicAny/DynAnyPackage/TypeMismatchHolder.java"/>
		<include name="org/omg/DynamicAny/DynArrayPOA.java"/>
		<include name="org/omg/DynamicAny/DynEnumPOA.java"/>
		<include name="org/omg/DynamicAny/DynFixedPOA.java"/>
		<include name="org/omg/DynamicAny/DynSequencePOA.java"/>
		<include name="org/omg/DynamicAny/DynStructPOA.java"/>
		<include name="org/omg/DynamicAny/DynUnionPOA.java"/>
		<include name="org/omg/DynamicAny/DynValueBox.java"/>
		<include name="org/omg/DynamicAny/DynValueBoxHelper.java"/>
		<include name="org/omg/DynamicAny/DynValueBoxHolder.java"/>
		<include name="org/omg/DynamicAny/DynValueBoxOperations.java"/>
		<include name="org/omg/DynamicAny/DynValueBoxPOA.java"/>
		<include name="org/omg/DynamicAny/DynValueCommon.java"/>
		<include name="org/omg/DynamicAny/DynValueCommonHelper.java"/>
		<include name="org/omg/DynamicAny/DynValueCommonHolder.java"/>
		<include name="org/omg/DynamicAny/DynValueCommonOperations.java"/>
		<include name="org/omg/DynamicAny/DynValueCommonPOA.java"/>
		<include name="org/omg/DynamicAny/DynValuePOA.java"/>
		<include name="org/omg/DynamicAny/_DynAnyFactoryStub.java"/>
		<include name="org/omg/DynamicAny/_DynAnyStub.java"/>
		<include name="org/omg/DynamicAny/_DynArrayStub.java"/>
		<include name="org/omg/DynamicAny/_DynEnumStub.java"/>
		<include name="org/omg/DynamicAny/_DynFixedStub.java"/>
		<include name="org/omg/DynamicAny/_DynSequenceStub.java"/>
		<include name="org/omg/DynamicAny/_DynStructStub.java"/>
		<include name="org/omg/DynamicAny/_DynUnionStub.java"/>
		<include name="org/omg/DynamicAny/_DynValueBoxStub.java"/>
		<include name="org/omg/DynamicAny/_DynValueCommonStub.java"/>
		<include name="org/omg/DynamicAny/_DynValueStub.java"/>
		<include name="org/omg/IOP/BI_DIR_IIOP.java"/>
		<include name="org/omg/IOP/ChainBypassCheck.java"/>
		<include name="org/omg/IOP/ChainBypassInfo.java"/>
		<include name="org/omg/IOP/CodecFactoryHolder.java"/>
		<include name="org/omg/IOP/CodecFactoryPackage/UnknownEncodingHolder.java"/>
		<include name="org/omg/IOP/CodecHelper.java"/>
		<include name="org/omg/IOP/CodecHolder.java"/>
		<include name="org/omg/IOP/CodecPackage/FormatMismatchHolder.java"/>
		<include name="org/omg/IOP/CodecPackage/InvalidTypeForEncodingHolder.java"/>
		<include name="org/omg/IOP/CodecPackage/TypeMismatchHolder.java"/>
		<include name="org/omg/IOP/EncodingFormatHelper.java"/>
		<include name="org/omg/IOP/EncodingHelper.java"/>
		<include name="org/omg/IOP/EncodingHolder.java"/>
		<include name="org/omg/IOP/FORWARDED_IDENTITY.java"/>
		<include name="org/omg/IOP/INVOCATION_POLICIES.java"/>
		<include name="org/omg/IOP/LogicalThreadId.java"/>
		<include name="org/omg/IOP/SendingContextRunTime.java"/>
		<include name="org/omg/IOP/TaggedComponentSeqHelper.java"/>
		<include name="org/omg/IOP/TaggedComponentSeqHolder.java"/>
		<include name="org/omg/IOP/UnknownExceptionInfo.java"/>
		<include name="org/omg/PortableInterceptor/ClientRequestInfoHelper.java"/>
		<include name="org/omg/PortableInterceptor/ClientRequestInfoHolder.java"/>
		<include name="org/omg/PortableInterceptor/ClientRequestInterceptorHelper.java"/>
		<include name="org/omg/PortableInterceptor/ClientRequestInterceptorHolder.java"/>
		<include name="org/omg/PortableInterceptor/CurrentHolder.java"/>
		<include name="org/omg/PortableInterceptor/ForwardRequestHolder.java"/>
		<include name="org/omg/PortableInterceptor/IORInfoHelper.java"/>
		<include name="org/omg/PortableInterceptor/IORInfoHolder.java"/>
		<include name="org/omg/PortableInterceptor/IORInterceptorHelper.java"/>
		<include name="org/omg/PortableInterceptor/IORInterceptorHolder.java"/>
		<include name="org/omg/PortableInterceptor/InterceptorHelper.java"/>
		<include name="org/omg/PortableInterceptor/InterceptorHolder.java"/>
		<include name="org/omg/PortableInterceptor/InvalidSlotHolder.java"/>
		<include name="org/omg/PortableInterceptor/ORBInitInfoHelper.java"/>
		<include name="org/omg/PortableInterceptor/ORBInitInfoHolder.java"/>
		<include name="org/omg/PortableInterceptor/ORBInitInfoPackage/DuplicateNameHolder.java"/>
		<include name="org/omg/PortableInterceptor/ORBInitInfoPackage/InvalidNameHolder.java"/>
		<include name="org/omg/PortableInterceptor/ORBInitializerHelper.java"/>
		<include name="org/omg/PortableInterceptor/ORBInitializerHolder.java"/>
		<include name="org/omg/PortableInterceptor/PolicyFactoryHelper.java"/>
		<include name="org/omg/PortableInterceptor/PolicyFactoryHolder.java"/>
		<include name="org/omg/PortableInterceptor/ReplyStatusHelper.java"/>
		<include name="org/omg/PortableInterceptor/RequestInfoHelper.java"/>
		<include name="org/omg/PortableInterceptor/RequestInfoHolder.java"/>
		<include name="org/omg/PortableInterceptor/ServerRequestInfoHelper.java"/>
		<include name="org/omg/PortableInterceptor/ServerRequestInfoHolder.java"/>
		<include name="org/omg/PortableInterceptor/ServerRequestInterceptorHelper.java"/>
		<include name="org/omg/PortableInterceptor/ServerRequestInterceptorHolder.java"/>
		<include name="org/omg/PortableInterceptor/SlotIdHelper.java"/>
		<include name="org/omg/PortableServer/CurrentPackage/NoContextHolder.java"/>
		<include name="org/omg/PortableServer/ForwardRequestHolder.java"/>
		<include name="org/omg/PortableServer/IdAssignmentPolicyValueHelper.java"/>
		<include name="org/omg/PortableServer/IdAssignmentPolicyValueHolder.java"/>
		<include name="org/omg/PortableServer/IdUniquenessPolicyValueHelper.java"/>
		<include name="org/omg/PortableServer/IdUniquenessPolicyValueHolder.java"/>
		<include name="org/omg/PortableServer/ImplicitActivationPolicyValueHelper.java"/>
		<include name="org/omg/PortableServer/ImplicitActivationPolicyValueHolder.java"/>
		<include name="org/omg/PortableServer/LifespanPolicyValueHelper.java"/>
		<include name="org/omg/PortableServer/LifespanPolicyValueHolder.java"/>
		<include name="org/omg/PortableServer/ObjectIdHelper.java"/>
		<include name="org/omg/PortableServer/ObjectIdHolder.java"/>
		<include name="org/omg/PortableServer/POAListHelper.java"/>
		<include name="org/omg/PortableServer/POAListHolder.java"/>
		<include name="org/omg/PortableServer/POAManagerPackage/AdapterInactiveHolder.java"/>
		<include name="org/omg/PortableServer/POAManagerPackage/StateHelper.java"/>
		<include name="org/omg/PortableServer/POAManagerPackage/StateHolder.java"/>
		<include name="org/omg/PortableServer/POAPackage/AdapterAlreadyExistsHolder.java"/>
		<include name="org/omg/PortableServer/POAPackage/AdapterNonExistentHolder.java"/>
		<include name="org/omg/PortableServer/POAPackage/InvalidPolicyHolder.java"/>
		<include name="org/omg/PortableServer/POAPackage/NoServantHolder.java"/>
		<include name="org/omg/PortableServer/POAPackage/ObjectAlreadyActiveHolder.java"/>
		<include name="org/omg/PortableServer/POAPackage/ObjectNotActiveHolder.java"/>
		<include name="org/omg/PortableServer/POAPackage/ServantAlreadyActiveHolder.java"/>
		<include name="org/omg/PortableServer/POAPackage/ServantNotActiveHolder.java"/>
		<include name="org/omg/PortableServer/POAPackage/WrongAdapterHolder.java"/>
		<include name="org/omg/PortableServer/POAPackage/WrongPolicyHolder.java"/>
		<include name="org/omg/PortableServer/RequestProcessingPolicyValueHelper.java"/>
		<include name="org/omg/PortableServer/RequestProcessingPolicyValueHolder.java"/>
		<include name="org/omg/PortableServer/ServantActivatorHolder.java"/>
		<include name="org/omg/PortableServer/ServantLocatorHolder.java"/>
		<include name="org/omg/PortableServer/ServantRetentionPolicyValueHelper.java"/>
		<include name="org/omg/PortableServer/ServantRetentionPolicyValueHolder.java"/>
		<include name="org/omg/PortableServer/ThreadPolicyValueHelper.java"/>
		<include name="org/omg/PortableServer/ThreadPolicyValueHolder.java"/>
	    </fileset>
	</delete>
    </target>

    <!-- ========================= COMPILE-IDL-COMPILER ================== -->
    <!-- Compile the IDL compiler -->
    <target name="compile-idl-compiler" depends="init">
	<echo message="Copying .prp files"/>
	<copy todir="${classes.dir}" overwrite="false">
	    <fileset dir="${src.dir}" includes="com/sun/tools/corba/se/idl/**/*.prp"/>
	</copy>
	<echo message="Compiling idl compiler"/>
	<javac srcdir="${src.dir}" destdir="${classes.dir}" 
		classpathref="classpath.master" 
		deprecation="${deprecation}"
		debug="${javac.debug}" 
		optimize="${javac.optimize}"
		failonerror="true">
	    <include name="com/sun/tools/corba/se/idl/**"/>
	</javac>
	<echo message="Copying .idl files"/>
	<copy todir="${lib.dir}" flatten="yes" overwrite="false">
	    <fileset dir="${src.dir}" includes="org/omg/CORBA/*.idl"/>
	</copy>
    </target>

    <!-- ========================= COMPILE-TESTS ========================= -->
    <!-- This target compiles all the ORB unit tests -->
    <target name="build-tests" depends="init, prepare-dirs, run-all-test-idl, run-all-test-rmic, compile-tests"/>

    <target name="compile-tests" depends="init, prepare-dirs, compile-tests-main, compile-tests-values"/>

    <target name="compile-tests-main" depends="init, prepare-dirs">
	<echo message="Compiling all tests"/>
	<javac destdir="${test-classes.dir}" 
		classpathref="test-classpath.master"
		deprecation="${deprecation}"
		debug="${javac.debug}" 
		optimize="${javac.optimize}"
		fork="true"
		memoryMaximumSize="512m"> 
	    <compilerarg value="-Xbootclasspath/p:${classes.dir}:${orblib.classes.dir}"/>
	    <src path="${test.src.dir}"/>
	    <src path="${test-gensrc.dir}"/>
	    <include name="**"/>
	    <!-- Exclude these files because they are compiled to a different
	         destdir in the compile-values target -->
	    <exclude name="values1/**"/>
	    <exclude name="values2/**"/>
	    <!-- Following files are excluded from compilation
		because they are either compiled during running of the tests
		or not compiled at all.  -->
	    <exclude name="corba/strm2/class*/**"/>
	    <exclude name="corba/evolve/original/**"/>
	    <exclude name="corba/evolve/evolved/UserName.java"/>
	    <exclude name="corba/example/Client.java"/>
	    <exclude name="corba/example/Server.java"/>
	    <exclude name="corba/driinvocation/**"/>
	    <exclude name="corba/tcpreadtimeout/**"/>

	    <!-- Excluded until we get the test moved to the JDK XML classes -->
	    <exclude name="corba/genericRPCMSGFramework/**"/>

	    <exclude name="hopper/h4549085/Server.java"/>
	    <exclude name="hopper/h4549085/Client.java"/>
	    <exclude name="hopper/h4620926/Server.java"/>
	    <exclude name="hopper/h4620926/Client.java"/>
	    <exclude name="hopper/h4670827/HelloImpl.java"/>
	    <exclude name="hopper/h4670827/Client.java"/>
	    <exclude name="hopper/h4670827/INSServer.java"/>
	    <exclude name="hopper/h4670827/TestConstants.java"/>

	    <exclude name="naming/pcosnaming/hello*"/>
	    <exclude name="naming/instest/Client.java*"/>
	    <exclude name="naming/instest/INSServer.java"/>
	    <exclude name="naming/instest/HelloImpl.java"/>

	    <exclude name="javax/rmi/CORBA/io/**"/>
	    <exclude name="java/**"/>

            <!--exclude name="corba/dynamicrmiiiop/testclasses/**"/-->
	</javac>
    </target>

    <target name="compile-tests-experimental" depends="init, prepare-dirs">
	<mkdir dir="${experimentaltestclasses.dir}"/>
	<javac destdir="${experimentaltestclasses.dir}" 
		classpathref="test-classpath.master"
		deprecation="${deprecation}"
		debug="${javac.debug}" 
		optimize="${javac.optimize}"
		failonerror="true">
	    <src path="${experimentaltest.src.dir}"/>
	    <include name="**"/>
	    <compilerarg value="-Xbootclasspath/p:${classes.dir}:${orblib.classes.dir}"/>
	</javac>
    </target>

    <target name="compile-tests-values" depends="init, prepare-dirs">
	<!-- Compile the values classes separately so that we can
	     control how and if they are in the classpath.
	     values1 and values2 contain different versions of the
	     same classes for testing class evolution.
	-->
	<javac destdir="${test-values1.dir}" 
		classpathref="test-classpath.master"
		deprecation="${deprecation}"
		debug="${javac.debug}" 
		optimize="${javac.optimize}"
		failonerror="true">
	    <compilerarg value="-Xbootclasspath/p:${classes.dir}:${orblib.classes.dir}"/>
	    <src path="${test.src.dir}/values1"/>
	    <include name="**"/>
	</javac>
	<javac destdir="${test-values2.dir}" 
		classpathref="test-classpath.master"
		deprecation="${deprecation}"
		debug="${javac.debug}" 
		optimize="${javac.optimize}"
		failonerror="true">
	    <compilerarg value="-Xbootclasspath/p:${classes.dir}:${orblib.classes.dir}"/>
	    <src path="${test.src.dir}/values2"/>
	    <include name="**"/>
	</javac>
    </target>

    <!-- ========================= EXPERIMENTAL ========================= -->
    <target name="compile-experimental" depends="init">
	<echo message="Compiling experimental ORB components"/>
	<mkdir dir="${experimentalclasses.dir}"/>
	<javac destdir="${experimentalclasses.dir}" 
		deprecation="${deprecation}"
		debug="${javac.debug}" 
		optimize="${javac.optimize}"
		failonerror="true">
	    <classpath>
		<path refid="classpath.master"/>
		<pathelement location="${experimentalclasses.dir}"/>
	    </classpath>
	    <src path="${experimentalsrc.dir}"/>
	    <include name="**"/> 
	    <compilerarg value="-Xbootclasspath/p:${classes.dir}:${orblib.classes.dir}"/>
	</javac>
    </target>

    <!-- ========================= ORB library  ==================== 
	The ORB library is a collection of all the reuseable, ORB-independent
	modules that the ORB uses.  This is currently used in the build to generate
	the timing points file, and to handle copyright processing and renaming.

	Note that this must work either renamed or not renamed, so both 
	the relocated directory and the non-relocated directory for
	ASM are included here.

        There are some classes in the ORB library that are not used at
        all at runtime.  These classes are excluded from the delivered
        OSGi bundles for GFv3.
     -->
    <target name="orb-library" depends="init, compile-orb-library"> 
	<jar jarfile="${releaselib.dir}/orblib.jar"
		    duplicate="fail">
	    <fileset dir="${orblib.classes.dir}">
		<include name="**"/>
	    </fileset>
	</jar>
    </target>
   
    <!-- ========================= Split Jar Packaging  ==================== 
        The split jar packaging splits the ORB code into a number of smaller
        jar files containing closely related packages.  The OSGi package 
        (see make-bundles) closely follows this packaging, except that only
        those classes acutally needs in GFv3 are packaged as bundles.
    -->

    <target name="orb-split" depends="init">
	<jar jarfile="${releaselib.dir}/orb.jar"
		    duplicate="fail">
	    <fileset dir="${classes.dir}">
                <include name="com/sun/corba/se/internal/**"/>
                <include name="com/sun/corba/se/pept/**"/>
                <include name="com/sun/corba/se/spi/btrace/**"/>
                <include name="com/sun/corba/se/spi/copyobject/**"/>
                <include name="com/sun/corba/se/spi/encoding/**"/>
                <include name="com/sun/corba/se/spi/extension/**"/>
                <include name="com/sun/corba/se/spi/folb/**"/>
                <include name="com/sun/corba/se/spi/ior/**"/>
                <include name="com/sun/corba/se/spi/legacy/**"/>
                <include name="com/sun/corba/se/spi/logging/**"/>
                <include name="com/sun/corba/se/spi/monitoring/**"/>
                <include name="com/sun/corba/se/spi/oa/**"/>
                <include name="com/sun/corba/se/spi/orb/**"/>
                <include name="com/sun/corba/se/spi/orbutil/**"/>
                <include name="com/sun/corba/se/spi/presentation/**"/>
                <include name="com/sun/corba/se/spi/protocol/**"/>
                <include name="com/sun/corba/se/spi/resolver/**"/>
                <include name="com/sun/corba/se/spi/servicecontext/**"/>
                <include name="com/sun/corba/se/spi/transport/**"/>
                <include name="com/sun/corba/se/impl/copyobject/**"/>
                <include name="com/sun/corba/se/impl/corba/**"/>
                <include name="com/sun/corba/se/impl/encoding/**"/>
                <include name="com/sun/corba/se/impl/folb/**"/>
                <include name="com/sun/corba/se/impl/interceptors/**"/>
                <include name="com/sun/corba/se/impl/io/**"/>
                <include name="com/sun/corba/se/impl/ior/**"/>
                <include name="com/sun/corba/se/impl/javax/**"/>
                <include name="com/sun/corba/se/impl/legacy/**"/>
                <include name="com/sun/corba/se/impl/logging/**"/>
                <include name="com/sun/corba/se/impl/monitoring/**"/>
                <include name="com/sun/corba/se/impl/oa/**"/>
                <include name="com/sun/corba/se/impl/orb/**"/>
                <include name="com/sun/corba/se/impl/orbutil/**"/>
                <include name="com/sun/corba/se/impl/plugin/**"/>
                <include name="com/sun/corba/se/impl/presentation/**"/>
                <include name="com/sun/corba/se/impl/protocol/**"/>
                <include name="com/sun/corba/se/impl/resolver/**"/>
                <include name="com/sun/corba/se/impl/servicecontext/**"/>
                <include name="com/sun/corba/se/impl/transport/**"/>
                <include name="com/sun/corba/se/impl/util/**"/>
	    </fileset>
	</jar>
	<jar jarfile="${releaselib.dir}/omgapi-extension.jar"
		    duplicate="fail">
	    <fileset dir="${classes.dir}">
		<include name="org/omg/CORBA/ORB*.class"/>
		<include name="javax/rmi/*.class"/>
		<include name="javax/rmi/CORBA/*.class"/>
	    </fileset>
	</jar>
	<jar jarfile="${releaselib.dir}/orbtransactions.jar"
		    duplicate="fail">
	    <fileset dir="${classes.dir}">
		<include name="org/omg/CORBA/TSIdentification.class"/>
		<include name="org/omg/CORBA/TSIdentificationPackage/*.class"/>
		<include name="org/omg/CosTransactions/*.class"/>
		<include name="org/omg/CosTSPortability/*.class"/>
		<include name="org/omg/CosTSInteroperation/*.class"/>
                <include name="com/sun/corba/se/impl/txpoa/*.class"/>
                <include name="com/sun/corba/se/spi/costransactions/*.class"/>
	    </fileset>
	</jar>
	<jar jarfile="${releaselib.dir}/csiv2-idl.jar"
		    duplicate="fail">
	    <fileset dir="${classes.dir}">
                <include name="com/sun/corba/se/org/**"/>
	    </fileset>
	</jar>
	<jar jarfile="${releaselib.dir}/naming.jar"
		    duplicate="fail">
	    <fileset dir="${classes.dir}">
                <include name="com/sun/corba/se/impl/naming/**"/>
	    </fileset>
	</jar>
	<jar jarfile="${releaselib.dir}/dynamicany.jar"
		    duplicate="fail">
	    <fileset dir="${classes.dir}">
                <include name="com/sun/corba/se/impl/dynamicany/**"/>
	    </fileset>
	</jar>
        <!-- Don't really need this in GFv3
	<jar jarfile="${releaselib.dir}/rmic-iiop.jar"
		    duplicate="fail">
	    <fileset dir="${classes.dir}">
                <include name="sun/rmi/**"/>
	    </fileset>
	</jar>
        -->
        <!-- Don't really need this in GFv3
	<jar jarfile="${releaselib.dir}/activation.jar"
		    duplicate="fail">
	    <fileset dir="${classes.dir}">
                <include name="com/sun/corba/se/spi/activation/**"/>
                <include name="com/sun/corba/se/impl/activation/**"/>
	    </fileset>
	</jar>
        -->
    </target>

    <target name="orb-library-split" depends="init">
	<jar jarfile="${releaselib.dir}/newtimer.jar"
		    duplicate="fail">
	    <fileset dir="${orblib.classes.dir}">
		<include name="com/sun/corba/se/spi/orbutil/newtimer/**"/>
		<include name="com/sun/corba/se/impl/orbutil/newtimer/**"/>
	    </fileset>
	</jar>
	<jar jarfile="${releaselib.dir}/codegen.jar"
		    duplicate="fail">
	    <fileset dir="${orblib.classes.dir}">
		<include name="com/sun/corba/se/spi/orbutil/copyobject/**"/>
		<include name="com/sun/corba/se/impl/orbutil/copyobject/**"/>
		<include name="com/sun/corba/se/spi/orbutil/codegen/**"/>
		<include name="com/sun/corba/se/impl/orbutil/codegen/**"/>
	    </fileset>
	</jar>
	<jar jarfile="${releaselib.dir}/orbgeneric.jar"
		    duplicate="fail">
	    <fileset dir="${orblib.classes.dir}">
		<include name="com/sun/corba/se/spi/orbutil/generic/**"/>
		<include name="com/sun/corba/se/spi/orbutil/closure/**"/>
		<include name="com/sun/corba/se/impl/orbutil/closure/**"/>
		<include name="com/sun/corba/se/spi/orbutil/proxy/**"/>
		<include name="com/sun/corba/se/impl/orbutil/graph/**"/>
		<include name="com/sun/corba/se/spi/orbutil/fsm/**"/>
		<include name="com/sun/corba/se/spi/orbutil/misc/**"/>
	    </fileset>
	</jar>
	<jar jarfile="${releaselib.dir}/asm.jar"
		    duplicate="fail">
	    <fileset dir="${orblib.classes.dir}">
		<include name="org/objectweb/**"/>
	    </fileset>
	</jar>

        <!-- the following jars are not needed in the GF ORB, so we won't
             make bundles for these.
        --> 

	<jar jarfile="${releaselib.dir}/orbtools.jar"
		    duplicate="fail">
	    <fileset dir="${orblib.classes.dir}">
		<include name="com/sun/corba/se/spi/orbutil/test/**"/>
		<include name="com/sun/corba/se/impl/orbutil/test/**"/>
		<include name="com/sun/corba/se/spi/orbutil/file/**"/>
		<include name="com/sun/corba/se/spi/orbutil/argparser/**"/>
	    </fileset>
	</jar>
	<jar jarfile="${releaselib.dir}/orbtransport.jar"
		    duplicate="fail">
	    <fileset dir="${orblib.classes.dir}">
		<include name="com/sun/corba/se/spi/orbutil/transport/**"/>
		<include name="com/sun/corba/se/impl/orbutil/transport/**"/>
		<include name="com/sun/corba/se/spi/orbutil/concurrent/**"/>
		<include name="com/sun/corba/se/impl/orbutil/concurrent/**"/>
	    </fileset>
	</jar>
   	<jar jarfile="${releaselib.dir}/orbjmx.jar"
		    duplicate="fail">
	    <fileset dir="${orblib.classes.dir}">
		<include name="com/sun/corba/se/spi/orbutil/jmx/**"/>
		<include name="com/sun/corba/se/impl/orbutil/jmx/**"/>
	    </fileset>
	</jar>
    </target>

    <macrodef name="make-bundle">
        <attribute name="classpath"/>
        <attribute name="file"/>
            <sequential>
                <java jar="${bnd-jar}" fork="true" failonerror="true">
                    <jvmarg value="-Dcorba.major.version=${corba.major.version}"/>
                    <jvmarg value="-Dcorba.minor.version=${corba.minor.version}"/>
                    <jvmarg value="-Dcorba.update.version=${corba.update.version}"/>
                    <jvmarg value="-Dcorba.build.identifier=${corba.build.identifier}"/>
                    <arg value="build"/>
                    <arg value="-classpath"/>
                    <arg value="@{classpath}"/>
                    <arg value="-output"/>
                    <arg value="${releaselib.dir}/bundles/${bundle.name.prefix}@{file}.jar"/>
                    <arg value="make/bnd/@{file}.bnd"/>
                </java>
            </sequential>
    </macrodef>

    <!-- ========================= OSGi bundle packaging ==================== 
        The ORB as delivered into GFv3 contains 9 OSGi bundles.
        These bundles are constructed in the make-bundles target using
        bnd and the various .bnd files.
    -->

    <target name="make-bundles" depends="init">
        <!-- we are not generating bundles for activation or rmic-iiop
             because they are not used in GFv3.
        -->

        <!-- orbtransactions includes only TSIdentificationImpl in the org.omg.CORBA package
             so we use wrap instead of build. NOT NEEDED: everything (except CSIv2) is going into omgapi.
	<jar jarfile="${releaselib.dir}/orbtransactions.tmp.jar"
		    duplicate="fail">
	    <fileset dir="${classes.dir}">
		<include name="org/omg/CORBA/TSIdentification.class"/>
		<include name="org/omg/CORBA/TSIdentificationPackage/AlreadyIdentified.class"/>
		<include name="org/omg/CORBA/TSIdentificationPackage/NotAvailable.class"/>
		<include name="org/omg/CosTransactions/*.class"/>
		<include name="org/omg/CosTSPortability/*.class"/>
		<include name="org/omg/CosTSInteroperation/*.class"/>
		<include name="com/sun/corba/se/impl/txpoa/*.class"/>
		<include name="com/sun/corba/se/spi/costransactions/*.class"/>
	    </fileset>
	</jar>
        <java jar="${bnd-jar}" fork="true" failonerror="true">
            <arg value="wrap"/>
            <arg value="-output"/>
            <arg value="${releaselib.dir}/bundles/${bundle.name.prefix}orbtransactions.jar"/>
            <arg value="-properties"/>
            <arg value="make/bnd/bnd.properties"/>
            <arg value="${releaselib.dir}/orbtransactions.tmp.jar"/>
        </java>
        <delete file="${releaselib.dir}/orbtransactions.tmp.jar"/>
        -->

        <make-bundle classpath="${classes.dir}" file="orb"/>
        <make-bundle classpath="${classes.dir}" file="omgapi"/>
        <make-bundle classpath="${classes.dir}" file="naming"/>
        <make-bundle classpath="${classes.dir}" file="dynamicany"/>
        <make-bundle classpath="${classes.dir}" file="csiv2-idl"/>

        <make-bundle classpath="${orblib.classes.dir}" file="codegen"/>
        <make-bundle classpath="${orblib.classes.dir}" file="newtimer"/>
        <make-bundle classpath="${orblib.classes.dir}" file="orbgeneric"/>
        <make-bundle classpath="${orblib.classes.dir}" file="asm"/>
    </target>

    <!-- ========================= Build the ORB library ====================  -->

    <target name="compile-orb-library" depends="init, prepare-dirs">
	<echo message="Compiling ORB library"/>
	<javac destdir="${orblib.classes.dir}" 
		classpathref="classpath.master"
		deprecation="${deprecation}"
		debug="${javac.debug}" 
		optimize="${javac.optimize}"
	       	failonerror="true"
		fork="true"
		memoryMaximumSize="512m"> 
	    <src path="${orblib.src.dir}"/>
	    <include name="**"/>
	    <compilerarg value="-Xlint:-unchecked,-deprecation,-fallthrough,path,-serial,finally"/>
	    <compilerarg value="-Xbootclasspath/p:${classes.dir}:${orblib.classes.dir}"/>
	</javac>
    </target>

    <target name="check-timing-file-changed" depends="init">
        <property name="tsrcfile" value="${src.dir}/com/sun/tools/corba/se/timer/timing.xml"/>
        <property name="tjavafile" value="${gensrc.dir}/com/sun/corba/se/impl/orbutil/newtimer/TimingPoints.java"/>
	<condition property="timing-file-changed">
	    <or>
		<not>
		    <available file="${tjavafile}"/>
		</not>
		<not>
		    <uptodate targetfile="${tjavafile}" srcfile="${tsrcfile}"/>
		</not>
	    </or>
	</condition>
    </target>

    <target name="update-copyright-headers" depends="init, orb-library">
	<!--
		This target is used when it is necessary to update the copyright headers.
		See com.sun.corba.se.spi.orbutil.file.CopyrightProcessor for all of the details.
		Notes:
		    - Certain directories are ignored, mainly Mercurial and CodeManager related directories.
		    - Files are classified as follows:
			- Java-like; uses /* ... */ style block comments
			- JavaLine-like; uses // ... style line comments
			- XML-like; uses <- -! ... - -> style block comments
			- Scheme-like; uses ; ... line comments
			- Shell-like; uses # ... line comments
			- Binary-like; can not be modified by this tool
		    - The classification is done as follows, in the order listed:
			1. Some files are recognized by exact name (primarily makefiles)
			2. Most files are classified by suffix
			3. If a file starts with "#!", it is a shell script.
			4. Otherwise we stop and complain, because we need to be correct for all files.
		    - The current copyright text lives in make/headers/copyright.txt.  This is just
		      the text: it must be formatted appropriately based on the file type.
		    - CopyrightProcessor supports a verbose flag, and a dryrun flag.  Turning both of these
		      on gives the details of what will happen, without actually changing anything.
		    - DO NOT INTERRUPT THIS TARGET!  It can destroy files, which is hardly catastrophic,
		      because the file is still in the version control system.
		    - Do NOT mix header comment changes with other changes!

		Arguments to command:
		    -verbose: normally set to false, except when debugging this
		    -dryrun: normally set to false, except when debugging this
		    -root: set to the root directories to process: 
			experimental, make, nbproject, src, test, tools, www
		    -skipdirs: set to the directories to skip:
			SCCS, .hg, Codemgr_wsdata, deleted_files, headers, freezepoint
		    -copyright: this is set to the copyright template, currently in make/headers/copyrights.txt
		    -startYear: set to the default start year for the header (1997)
			
		The tool is flexible enough to remove old Sun copyright headers, leave non-Sun copyright headers in
		place, ignore copyright info that is not in comments, and insert the correct start year into the
		new copyright header.
	-->
	<java classname="com.sun.corba.se.spi.orbutil.file.CopyrightProcessor" fork="true"
	    dir="${root.dir}">
	    <bootclasspath>
		<pathelement location="${releaselib.dir}/orblib.jar"/>
		<pathelement location="${rt.jar}"/>
	    </bootclasspath>
	    <classpath>
		<pathelement location="${releaselib.dir}/orblib.jar"/>
	    </classpath>
	    <arg value="-validate"/>
	    <arg value="false"/>
	    <arg value="-verbose"/>
	    <arg value="0"/>
	    <arg value="-dryrun"/>
	    <arg value="false"/>
	    <arg value="-roots"/>
	    <arg value="${copyright.roots}"/>
	    <arg value="-skipdirs"/>
	    <arg value="${copyright.skip}"/>
	    <arg value="-copyright"/>
	    <arg value="${copyright.file}"/>
	    <arg value="-startyear"/>
	    <arg value="1997"/>
	</java>
    </target>

    <target name="validate-copyright-headers" depends="init, orb-library">
	<!--
	    This target is similar to update-copyright-headers,
	    but instead it validates that all files have the correct headers.

	-->
	<java classname="com.sun.corba.se.spi.orbutil.file.CopyrightProcessor" fork="true"
	    dir="${root.dir}">
	    <bootclasspath>
		<pathelement location="${releaselib.dir}/orblib.jar"/>
		<pathelement location="${rt.jar}"/>
	    </bootclasspath>
	    <classpath>
		<pathelement location="${releaselib.dir}/orblib.jar"/>
	    </classpath>
	    <arg value="-validate"/>
	    <arg value="true"/>
	    <arg value="-verbose"/>
	    <arg value="0"/>
	    <arg value="-dryrun"/>
	    <arg value="false"/>
	    <arg value="-roots"/>
	    <arg value="${copyright.roots}"/>
	    <arg value="-skipdirs"/>
	    <arg value="${copyright.skip}"/>
	    <arg value="-copyright"/>
	    <arg value="${copyright.file}"/>
	    <arg value="-startyear"/>
	    <arg value="1997"/>
	</java>
    </target>

    <target name="generate-timing-points" depends="init, check-timing-file-changed, orb-library" if="timing-file-changed">
	<!-- tp-src-dir contains timing.xml and timing.dtd and
	     must be the current directory for the forked TimerPointSourceGenerator.

	     TPSG takes three arguments:
		1. The input file.
		2. The base output directory (not including the package).
		3. A boolean debug flag.

	    We should be able to debug this by adding:

	    <jvmarg value="-Xdebug -Xnoagent -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=12321"/>

	    to the java command, but that does not work.
	  -->
	<property name="tp-src-dir" value="${src.dir}/com/sun/tools/corba/se/timer"/>
	<java classname="com.sun.corba.se.impl.orbutil.newtimer.TimerPointSourceGenerator" fork="true"
	    dir="${tp-src-dir}">
	    <bootclasspath>
		<pathelement location="${releaselib.dir}/orblib.jar"/>
		<pathelement location="${rt.jar}"/>
	    </bootclasspath>
	    <classpath>
		<pathelement location="${releaselib.dir}/orblib.jar"/>
	    </classpath>
	    <arg value="timing.xml"/>
	    <arg value="${gensrc.dir}"/>
	    <arg value="false"/>
	</java>
    </target>
    
    <!-- ========================= CLEAN ========================= -->
    <target name="clean" depends="init,clean-emma,clean-tests,clean-experimental">
	<delete dir="${build.dir}"/>
	<delete dir="${orblib.build.dir}"/>
	<delete dir="${test-build.dir}"/>
	<delete dir="${javadoc.dir}"/>
    </target>

    <target name="clean-emma" depends="init">
	<delete dir="${emma.dir}"/>
    </target>

    <target name="clean-tests" depends="init">
	<delete dir="${test.run.base}"/>
        <delete dir="${experimentaltestclasses.dir}"/>
    </target>

    <target name="clean-experimental">
        <delete dir="experimental/build"/>
    </target>

    <!-- ========================= CREATE-JARS ========================= -->
    <target name="create-jars" depends="init">
	<jar jarfile="${releaselib.dir}/idlj.jar" 
		    duplicate="fail">
	    <fileset dir="${classes.dir}">
		<include name="com/sun/tools/**/*.class"/>
		<include name="com/sun/tools/**/*.properties"/>
	    </fileset>
	</jar>
	<jar jarfile="${releaselib.dir}/peorb.jar"
		    duplicate="fail">
	    <fileset dir="${classes.dir}">
		<include name="com/sun/corba/**/*.class"/>
		<include name="com/sun/corba/**/*.properties"/>
		<include name="com/sun/org/**/*.class"/>
		<include name="com/sun/org/**/*.properties"/>
		<include name="sun/rmi/**/*.class"/>
		<include name="sun/rmi/**/*.properties"/>
		<include name="sun/corba/*.class"/>
	    </fileset>
	</jar>
	<!-- omgapi.jar contains ONLY those OMG APIs that are different in the
	     app server from those in Java 5 or later.  This includes EnumDesc,
	     which is not in the JDK. -->
	<jar jarfile="${releaselib.dir}/omgapi.jar"
		    duplicate="fail">
	    <fileset dir="${classes.dir}">
		<include name="org/omg/CORBA/ORB*.class"/>
		<include name="javax/rmi/PortableRemoteObject.class"/>
		<include name="javax/rmi/CORBA/Stub.class"/>
		<include name="javax/rmi/CORBA/Util.class"/>
		<include name="javax/rmi/CORBA/EnumDesc.class"/>
		<include name="javax/rmi/CORBA/ProxyDesc.class"/>
		<include name="org/omg/CORBA/TSIdentification.class"/>
		<include name="org/omg/CORBA/TRANSACTION_UNAVAILABLE.class"/>
		<include name="org/omg/CORBA/TSIdentificationPackage/AlreadyIdentified.class"/>
		<include name="org/omg/CORBA/TSIdentificationPackage/NotAvailable.class"/>
		<include name="org/omg/CORBA/portable/ValueInputStream.class"/>
		<include name="org/omg/CORBA/portable/ValueOutputStream.class"/>
		<include name="javax/rmi/CORBA/ValueHandlerMultiFormat.class"/>
		<include name="org/omg/CosTransactions/*.class"/>
		<include name="org/omg/CosTSPortability/*.class"/>
		<include name="org/omg/CosTSInteroperation/*.class"/>
	    </fileset>
	</jar>
    </target>

    <!-- ========================= JAVADOC ========================= -->
    <target name="javadoc" depends="init">
        <mkdir dir="${javadoc.dir}"/>
	<javadoc packagenames="com.sun.corba.se.spi.*,com.sun.corba.se.pept.*"
	         sourcepath="${src.dir}:${orblib.src.dir}:${gensrc.dir}"
		 classpathref="classpath.master"
		 destdir="${javadoc.dir}"
		 author="true"
		 version="true"
		 use="true"
		 windowtitle="Sun Java CORBA ORB SPI"/>
    </target>

    <!-- ========================= CREATE JAR FILE TO PUSH ============ -->

    <target name="jar" depends="init, compile, create-jars">
      <mkdir dir="${release.dir}/META-INF"/>
      <copy file="legal/CDDLv1.0.txt" tofile="${release.dir}/META-INF/LICENSE.txt"/>
        <jar jarfile="${release.orb.jar}">          
             <metainf dir="${release.dir}/META-INF"
                     includes="LICENSE.txt"/>
             <!-- include classes that go into peorb.jar 
		  Include sun.corba classes so that we can run on non-Sun JDKs
		  that include Sun's Unsafe and ReflectionFactory APIs.
		  At least, I hope that works.
	      -->
             <fileset dir="${classes.dir}">
	         <include name="com/sun/corba/**/*.class"/>
		 <include name="com/sun/corba/**/*.properties"/>
		 <include name="com/sun/org/**/*.class"/>
		 <include name="com/sun/org/**/*.properties"/>
		 <include name="sun/rmi/**/*.class"/>
		 <include name="sun/rmi/**/*.properties"/>
		 <include name="sun/corba/*.class"/>
	     </fileset>
             <fileset dir="${classes.dir}">
   	         <include name="org/omg/CORBA/TSIdentification.class"/>
		 <include name="org/omg/CORBA/TSIdentificationPackage/AlreadyIdentified.class"/>
		 <include name="org/omg/CORBA/TSIdentificationPackage/NotAvailable.class"/>	
		 <include name="org/omg/CosTransactions/*.class"/>
		 <include name="org/omg/CosTSPortability/*.class"/>
		 <include name="org/omg/CosTSInteroperation/*.class"/>
   	     </fileset>
      </jar>

    </target>

    <!-- ======================== findbugs integration ========= 

	 This uses the findbugs command instead of the findbugs ant task because it
	 is easier to use the command than to arrange that findbugs-ant.jar is properly
	 installed where it is needed.

      -->

    <!-- <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask"/> -->
    
    <target name="findbugs" depends="init"> 
	<mkdir dir="${findbugs.dir}"/>
	<exec executable="${findbugs.home}/bin/findbugs">
	    <arg value="-textui"/>
	    <arg value="-html"/>
	    <arg value="-outputFile"/>
	    <arg file="${findbugs.dir}/orb-fb.html"/>
	    <arg value="-exclude"/>
	    <arg file="${findbugs.exclude.file}"/>
	    <arg value="-sourcepath"/>
	    <arg path="${src.dir}:${orblib.src.dir}:${test.src.dir}"/>
	    <arg file="${releaselib.dir}/omgapi.jar"/>
	    <!-- <arg file="${releaselib.dir}/idlj.jar"/> -->
	    <arg file="${releaselib.dir}/orblib.jar"/>
	    <arg file="${releaselib.dir}/peorb.jar"/>
	    <!-- <arg file="${test-classes.dir}"/> -->
	</exec>
    </target>

    <target name="findbugs-xml" depends="init"> 
	<mkdir dir="${findbugs.dir}"/>
	<exec executable="${findbugs.home}/bin/findbugs">
	    <arg value="-textui"/>
	    <arg value="-xml"/>
	    <arg value="-outputFile"/>
	    <arg file="${findbugs.dir}/orb-fb.xml"/>
	    <arg value="-exclude"/>
	    <arg file="${findbugs.exclude.file}"/>
	    <arg value="-sourcepath"/>
	    <arg path="${src.dir}:${orblib.src.dir}:${test.src.dir}"/>
	    <arg file="${releaselib.dir}/omgapi.jar"/>
	    <!-- <arg file="${releaselib.dir}/idlj.jar"/> -->
	    <arg file="${releaselib.dir}/orblib.jar"/>
	    <arg file="${releaselib.dir}/peorb.jar"/>
	    <!-- <arg file="${test-classes.dir}"/> -->
	</exec>
    </target>

    <!-- also depends on orb-library, but we need to prevent the recompilation -->
    <target name="rename" depends="init">
	<mkdir dir="build/rename/ee"/>
	<java classname="com.sun.corba.se.spi.orbutil.file.WorkspaceRename" fork="true"
	    dir="${root.dir}">
	    <bootclasspath>
		<pathelement location="${releaselib.dir}/orblib.jar"/>
		<pathelement location="${rt.jar}"/>
	    </bootclasspath>
	    <classpath>
		<pathelement location="${releaselib.dir}/orblib.jar"/>
	    </classpath>
	    <arg value="-verbose"/>
	    <arg value="0"/>
	    <arg value="-dryrun"/>
	    <arg value="false"/>
	    <arg value="-source"/>
	    <arg value="."/>
	    <arg value="-destination"/>
	    <arg value="build/rename/ee"/>
	    <arg value="-version"/>
	    <arg value="ee"/>
	</java>
    </target>

    &src-idl;
    &jscheme;
    &test-idl;
    &test-rmic;
    &test;
    &emma;
    &maven;
</project>

