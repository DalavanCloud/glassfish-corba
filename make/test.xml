<?xml version="1.0" encoding="iso-8859-1"?>
<!--
  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 
  Copyright 2005-2007 Sun Microsystems, Inc. All rights reserved.
 
  The contents of this file are subject to the terms of either the GNU
  General Public License Version 2 only ("GPL") or the Common Development
  and Distribution License("CDDL") (collectively, the "License").  You
  may not use this file except in compliance with the License. You can obtain
  a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html
  or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific
  language governing permissions and limitations under the License.
 
  When distributing the software, include this License Header Notice in each
  file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
  Sun designates this particular file as subject to the "Classpath" exception
  as provided by Sun in the GPL Version 2 section of the License file that
  accompanied this code.  If applicable, add the following below the License
  Header, with the fields enclosed by brackets [] replaced by your own
  identifying information: "Portions Copyrighted [year]
  [name of copyright owner]"
 
  Contributor(s):
 
  If you wish your version of this file to be governed by only the CDDL or
  only the GPL Version 2, indicate your decision by adding "[Contributor]
  elects to include this software in this distribution under the [CDDL or GPL
  Version 2] license."  If you don't indicate a single choice of license, a
  recipient has the option to distribute your version of this file under
  either the CDDL, the GPL Version 2 or to extend the choice of license to
  its licensees as provided above.  However, if you add GPL Version 2 code
  and therefore, elected the GPL Version 2 license, then the option applies
  only if the new code is made subject to such option by the copyright
  holder.
-->


<!-- Macro used to run CTF tests.  Some of these are also junit tests, but cannot be run directly under the junit ant task. -->
<macrodef name="run-test">
    <attribute name="args"/>
    <sequential>
	<echo message="Called run-test with args=@{args}"/>
	<java classname="test.Test" classpathref="test-classpath.master" fork="true" dir="${test.run.base}">
	    <jvmarg value="-Djavax.rmi.CORBA.UtilClass=com.sun.corba.se.impl.javax.rmi.CORBA.Util"/>
	    <jvmarg value="-Djavax.rmi.CORBA.StubClass=com.sun.corba.se.impl.javax.rmi.CORBA.StubDelegateImpl"/>
	    <jvmarg value="-Djavax.rmi.CORBA.PortableRemoteObjectClass=com.sun.corba.se.impl.javax.rmi.PortableRemoteObject"/>
	    <jvmarg value="-Dcorba.test.orb.classpath=${classes.dir}:${orblib.classes.dir}:${experimentalclasses.dir}"/>
            <!-- add this to debug use of JUnitReportHelper:
            <jvmarg value="-Dcorba.test.junit.helper.debug=true"/>
            -->
	    <jvmarg value="-Dhttp.server.port=${http.server.port}"/>
	    <jvmarg value="-Djava.rmi.server.codebase=http://localhost:${http.server.port}/"/>
	    <jvmarg value="-Dhttp.server.root.directory=../build/values2/classes"/>
	    <jvmarg value="-Djava.security.policy=../src/share/classes/test.policy"/>
	    <jvmarg value="-Djava.security.debug=debug"/>
	    <jvmarg value="-Dorg.omg.CORBA.ORBClass=com.sun.corba.se.impl.orb.ORBImpl"/>
	    <jvmarg value="-Dorg.omg.CORBA.ORBSingletonClass=com.sun.corba.se.impl.orb.ORBSingleton"/>
	    <jvmarg value="-Dcom.sun.corba.se.POA.ORBServerId=1"/>
	    <jvmarg value="-Dcom.sun.corba.se.ORBBase=${basedir}"/>
	    <jvmarg value="-Dcom.sun.corba.se.test.sourcepath=${test.source.path}"/>
	    <jvmarg value="-Dcom.sun.corba.se.ORBUseDynamicStub=${use.dynamic.stub}"/>
	    <jvmarg value="-Dcom.sun.corba.se.ORBUseCodegenReflectiveCopyobject=${use.codegen.copyobject}"/>
	    <jvmarg value="-Dcom.sun.corba.se.encoding.ORBEnableJavaSerialization=${use.java.serialization}"/>
	    <jvmarg value="-Dcom.sun.corba.se.ORBDebugForkedProcess=${debug.forked.process}"/>
	    <jvmarg value="-Dcom.sun.corba.se.ORBDebugStubGeneration=false"/>
	    <jvmarg value="-Djunit.report.dir=junitreports"/>
	    <jvmarg value="-Demma.coverage.out.file=../../${emma.dir}/orb_coverage.ec"/>
	    <jvmarg value="-Demma.coverage.out.merge=true"/>
	    <jvmarg value="-Demma.rt.control=false"/>
	    <jvmarg value="-Xbootclasspath/p:${emma.classes.dir}:${classes.dir}:${orblib.classes.dir}:${experimentalclasses.dir}:${tools-jar}:${emma-jar}:${gmbal-jar}"/>
	    <jvmarg line="${debug.args}"/>
            <jvmarg value="-Xmx200m"/>
	    <!-- was:
	    <arg line="-file ../src/share/classes/@{testfile}"/>
	    <arg value="-verbose"/>
	    -->

	    <arg line="@{args}"/>

	    <!-- Uncomment this to dump information about arguments to forked processes. 
	    <arg line="-forkdebuglevel 1"/>
            -->
	    <arg line="-output gen"/>
	</java>
    </sequential>
</macrodef>


<!-- Macro used to run junit tests directly. -->
<macrodef name="run-junit-test">
    <element name="test-cases" optional="no"/>
    <sequential>
	<!-- <run-test args="-file ../src/share/classes/corba/CopyObjectTests.tdesc -verbose"/> 
	<run-test args="-test corba.copyobjectpolicy.CopyObjectPolicyTest -verbose"/> -->
	<junit printsummary="on" fork="on" forkmode="perTest" newenvironment="true" maxmemory="200M" showoutput="true" dir="${test.run.base}">
	    <sysproperty key="javax.rmi.CORBA.UtilClass" value="com.sun.corba.se.impl.javax.rmi.CORBA.Util"/>
	    <sysproperty key="javax.rmi.CORBA.StubClass" value="com.sun.corba.se.impl.javax.rmi.CORBA.StubDelegateImpl"/>
	    <sysproperty key="javax.rmi.CORBA.PortableRemoteObjectClass" value="com.sun.corba.se.impl.javax.rmi.PortableRemoteObject"/>
	    <sysproperty key="corba.test.orb.classpath" value="${classes.dir}:${orblib.classes.dir}"/>
	    <sysproperty key="http.server.port" value="${http.server.port}"/>
	    <sysproperty key="java.rmi.server.codebase" value="http://localhost:${http.server.port}/"/>
	    <sysproperty key="http.server.root.directory" value="../build/values2/classes"/>
	    <sysproperty key="java.security.policy" value="../src/share/classes/test.policy"/>
	    <sysproperty key="java.security.debug" value="debug"/>
	    <sysproperty key="org.omg.CORBA.ORBClass" value="com.sun.corba.se.impl.orb.ORBImpl"/>
	    <sysproperty key="org.omg.CORBA.ORBSingletonClass" value="com.sun.corba.se.impl.orb.ORBSingleton"/>
	    <sysproperty key="com.sun.corba.se.POA.ORBServerId" value="1"/>
	    <sysproperty key="com.sun.corba.se.ORBBase" value="${basedir}"/>
	    <sysproperty key="com.sun.corba.se.test.sourcepath" value="${test.source.path}"/>
	    <sysproperty key="com.sun.corba.se.ORBUseDynamicStub" value="${use.dynamic.stub}"/>
	    <sysproperty key="com.sun.corba.se.ORBUseCodegenReflectiveCopyobject" value="${use.codegen.copyobject}"/>
	    <sysproperty key="com.sun.corba.se.encoding.ORBEnableJavaSerialization" value="${use.java.serialization}"/>
	    <sysproperty key="com.sun.corba.se.ORBDebugForkedProcess" value="${debug.forked.process}"/>
	    <sysproperty key="com.sun.corba.se.ORBDebugStubGeneration" value="false"/>
	    <sysproperty key="junit.report.dir" value="junitreports"/>
	    <sysproperty key="emma.coverage.out.file" value="../../${emma.dir}/orb_coverage.ec"/>
	    <sysproperty key="emma.coverage.out.merge" value="true"/>
	    <sysproperty key="emma.rt.control" value="false"/>
	    <classpath>
		<path refid="test-classpath.master"/>
	    </classpath> 
	    <jvmarg value="-Xbootclasspath/p:${emma.classes.dir}:${classes.dir}:${orblib.classes.dir}:${boot.dir}/lib/tools.jar:${emma-jar}"/> 
	    <jvmarg line="${debug.args}"/>
	    <formatter type="xml"/>
	    <test-cases/>
	</junit>
    </sequential>
</macrodef>

<target name="test-init" depends="init">
    <condition property="use.java.serialization" value="true" else="false">
        <equals arg1="${env.JAVA_SERIALIZATION}" arg2="1"/>
    </condition>

    <condition property="debug.forked.process" value="true" else="false">
        <equals arg1="${env.DEBUGGER}" arg2="1"/>
    </condition>

    <condition property="debug.args" value="-Xdebug -Xnoagent -Xrunjdwp:transport=dt_socket,server=y,suspend=y" else="">
        <equals arg1="${env.DEBUGGER}" arg2="1"/>
    </condition> 

    <condition property="debug.args" value="-Xrunoii intuitive.audit.Audit -port 31900 -pause -noexit -startCPUprofiler:type=instrumentation,precision=micro">
        <equals arg1="${env.DEBUGGER}" arg2="2"/>
    </condition> 

    <condition property="use.dynamic.stub" value="false" else="true">
        <equals arg1="${env.STATIC_STUB}" arg2="1"/>
    </condition> 

    <condition property="use.codegen.copyobject" value="true" else="false">
        <equals arg1="${env.CODEGEN_COPYOBJECT}" arg2="1"/>
    </condition>

    <mkdir dir="${test.output}"/>
    <mkdir dir="${junit.reports}"/>
    
    <!-- RMI_IIOP_WEB_SERVER is set in Hudson job to guarantee a free port. -->
    <property name="set.http.server.port" value="${env.RMI_IIOP_WEB_SERVER}"/>

    <condition property="http.server.port" value="9090" else="${set.http.server.port}">
        <matches string="${set.http.server.port}" pattern="env.RMI_IIOP_WEB_SERVER"/>
    </condition>

    <echo message="debug.args=${debug.args}"/>
    <echo message="use.dynamic.stub=${use.dynamic.stub}"/>
    <echo message="use.java.serialization=${use.java.serialization}"/>
    <echo message="use.codegen.copyobject=${use.codegen.copyobject}"/>
    <echo message="http.server.port=${http.server.port}"/>
</target>

<target name="run-test-target" depends="test-init">
    <property environment="env"/>
    <property name="test-args" value="${env.TEST_ARGS}"/>
    <run-test args="${test-args}"/>
</target>

<target name="test" depends="test-init, build-tests, test-all"/>

<target name="test-all" depends="test-init, clean-test-output, test-rmi-iiop, test-copyobject, test-corba, test-pi, test-naming, test-hopper, test-mantis, test-perf"/>

<target name="archive-test-results" depends="test-init">
    <jar jarfile="${releaselib.dir}/test-results.jar">
	<fileset dir="${test.output}">
	    <include name="*"/>
	</fileset>
    </jar>
</target>

<target name="clean-test-output">
    <delete dir="${test.output}" quiet="false"/>
</target>

<target name="test-rmi-iiop" depends="test-init">
    <java classname="com.sun.corba.se.impl.util.ORBProperties" classpathref="test-classpath.master"/>
    <run-test args="-file ../src/share/classes/test/AllTests.tdesc -verbose"/>
</target>

<target name="test-experimental" depends="test-init">
    <run-test args="-file ../../experimental/test/src/share/classes/corba/ExperimentalTests.tdesc -verbose"/>
</target>

<target name="test-corba" depends="test-init,test-corba-junit">
    <run-test args="-file ../src/share/classes/corba/CORBATests.tdesc -verbose"/>
</target>

<target name="test-corba-junit" depends="test-init">
    <run-junit-test>
        <test-cases>
            <test name="corba.codegen.Client" todir="${junit.reports}"/>
            <!-- <test name="corba.messagetrace.Client" todir="${junit.reports}"/> -->
            <test name="corba.misc.Client" todir="${junit.reports}"/>
            <test name="corba.dynamicrmiiiop.Client" todir="${junit.reports}"/>
        </test-cases>
    </run-junit-test>
</target>

<target name="test-copyobject" depends="test-init">
    <run-junit-test>
	<test-cases>
	    <test name="corba.copyobject.NewReflectTest" todir="${junit.reports}"/>
	    <test name="corba.copyobject.NewReflectFallbackTest" todir="${junit.reports}"/>
	    <test name="corba.copyobject.OldReflectTest" todir="${junit.reports}"/>
	    <test name="corba.copyobject.JavaStreamTest" todir="${junit.reports}"/>
	    <test name="corba.copyobject.ORBStreamTest" todir="${junit.reports}"/>
	</test-cases>
    </run-junit-test>
</target>

<target name="test-pi" depends="test-init">
    <run-test args="-file ../src/share/classes/pi/PITests.tdesc -verbose"/>
</target>

<target name="test-hopper" depends="test-init">
    <run-test args="-file ../src/share/classes/hopper/HopperTests.tdesc -verbose"/>
</target>

<target name="test-mantis" depends="test-init">
    <run-test args="-file ../src/share/classes/mantis/MantisTests.tdesc -verbose"/>
</target>

<target name="test-naming" depends="test-init">
    <run-test args="-file ../src/share/classes/naming/NamingTests.tdesc -verbose"/>
</target>


<target name="test-perf" depends="test-init">
    <run-test args="-file ../src/share/classes/performance/Tests.tdesc -verbose"/>
</target>
