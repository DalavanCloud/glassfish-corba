<?xml version="1.0" encoding="iso-8859-1"?>
<!--
  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 
  Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 
  The contents of this file are subject to the terms of either the GNU
  General Public License Version 2 only ("GPL") or the Common Development
  and Distribution License("CDDL") (collectively, the "License").  You
  may not use this file except in compliance with the License. You can obtain
  a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html
  or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific
  language governing permissions and limitations under the License.
 
  When distributing the software, include this License Header Notice in each
  file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
  Sun designates this particular file as subject to the "Classpath" exception
  as provided by Sun in the GPL Version 2 section of the License file that
  accompanied this code.  If applicable, add the following below the License
  Header, with the fields enclosed by brackets [] replaced by your own
  identifying information: "Portions Copyrighted [year]
  [name of copyright owner]"
 
  Contributor(s):
 
  If you wish your version of this file to be governed by only the CDDL or
  only the GPL Version 2, indicate your decision by adding "[Contributor]
  elects to include this software in this distribution under the [CDDL or GPL
  Version 2] license."  If you don't indicate a single choice of license, a
  recipient has the option to distribute your version of this file under
  either the CDDL, the GPL Version 2 or to extend the choice of license to
  its licensees as provided above.  However, if you add GPL Version 2 code
  and therefore, elected the GPL Version 2 license, then the option applies
  only if the new code is made subject to such option by the copyright
  holder.
-->
  <!-- 
  Running emma on the ORB
  All emma files will end up in <ws>/build/coverage as follows:
  build/coverage/classes		contains the instrumented ORB classes
  build/coverage/report			contains the generated reports
  build/coverage/orb_coverage.ec	contains the collected coverage data from running the tests
  
  The emma target must be run after the build target.  The emma target will:
  - call init, to set up the properties
  - call emma-instr, to instrument the appropriate ORB classes
  - call test, to run all tests against the instrumented code
  - call emma-report, to finish things up and generate the coverage reports
  --> 

  <!-- directory that contains emma.jar and emma_ant.jar: -->
  <property name="emma.lib.dir" value="${basedir}/lib"/>

  <!-- path element used by EMMA taskdef below: -->
  <path id="emma.lib" >
    <pathelement location="${emma.lib.dir}/emma.jar"/>
    <pathelement location="${emma.lib.dir}/emma_ant.jar"/>
  </path>

  <target name="emma" depends="init,clean-emma,emma-instr,test,emma-report">
  </target>
 
  <target name="emma-instr" depends="init">
    <mkdir dir="${emma.classes.dir}"/>
    <emma>
	<instr mode="copy" merge="true" outdir="${emma.classes.dir}" outfile="${emma.metadata.file}">
	    <instrpath>
		<pathelement location="${classes.dir}"/>
		<pathelement location="${orblib.classes.dir}"/>
	    </instrpath>
	    <filter includes="com.sun.corba.se.pept.*"/>
	    <filter includes="com.sun.corba.se.pept.*.*"/>
	    <filter includes="com.sun.corba.se.pept.*.*.*"/>
	    <filter includes="com.sun.corba.se.spi.*"/>
	    <filter includes="com.sun.corba.se.spi.*.*"/>
	    <filter includes="com.sun.corba.se.spi.*.*.*"/>
	    <filter includes="com.sun.corba.se.impl.*"/>
	    <filter includes="com.sun.corba.se.impl.*.*"/>
	    <filter includes="com.sun.corba.se.impl.*.*.*"/>
	    <filter includes="javax.rmi.PortableRemoteObject"/>
	    <filter includes="javax.rmi.CORBA.*"/>
	    <filter includes="com.sun.corba.se.spi.folb.GroupInfoServiceBase"/>

	    <!-- exclude IDL and scheme generated classes -->
	    <filter excludes="com.sun.corba.se.spi.folb.*"/>
	    <filter excludes="com.sun.corba.se.impl.logging.*"/>

	    <!-- exclude ORB classes not used in the app server -->
	    <filter excludes="com.sun.corba.se.spi.activation.*"/>
	    <filter excludes="com.sun.corba.se.spi.activation.InitialNameServicePackage.*"/>
	    <filter excludes="com.sun.corba.se.spi.activation.LocatorPackage.*"/>
	    <filter excludes="com.sun.corba.se.spi.activation.RepositoryPackage.*"/>
	    <filter excludes="com.sun.corba.se.impl.activation.*"/>
	    <filter excludes="com.sun.corba.se.impl.orbutil.copyobject.CodegenCopier*"/>
	    <filter excludes="com.sun.corba.se.impl.orbutil.copyobject.FastCache*"/>
	    <filter excludes="com.sun.corba.se.spi.orbutil.proxy.*"/>
	    <filter excludes="com.sun.corba.se.impl.orbutil.*1_3"/>
	    <filter excludes="com.sun.corba.se.impl.orbutil.*1_3_1"/>
	    <filter excludes="com.sun.corba.se.impl.dynamicany.*"/>
	    <filter excludes="com.sun.corba.se.impl.naming.pcosnaming.*"/>
	    <filter excludes="com.sun.corba.se.internal.*.*"/>
	    <filter excludes="com.sun.corba.se.org.omg"/>
	    <filter excludes="com.sun.org.omg"/>
	    <filter excludes="com.sun.corba.se.org.objectweb"/>
	</instr>
    </emma>
  </target>

  <!-- this loads <emma> and <emmajava> custom tasks: -->
  <taskdef resource="emma_ant.properties" classpathref="emma.lib" />

  <target name="emma-report" depends="init">
    <emma>
      <report sort="+block,+name,+method,+class"
              metrics="method:80,block:70,line:70,class:80"
      >
	<sourcepath>
	  <pathelement location="${src.dir}"/>
	  <pathelement location="${orblib.src.dir}"/>
	</sourcepath>
        <!-- collect all EMMA data dumps (metadata and runtime)
             [this can be done via nested <fileset> fileset elements
             or <file> elements pointing to a single file]:
        -->
        <fileset dir="${emma.dir}" >
          <include name="*.ec" />
          <include name="*.em" />
        </fileset>

        <!-- for every type of report desired, configure a nested
             element; various report parameters
             can be inherited from the parent <report>
             and individually overridden for each report type:
        <txt outfile="${coverage.dir}/coverage.txt"
             depth="package"
             columns="class,method,block,line,name"
        />
        <xml outfile="${coverage.dir}/coverage.xml"
             depth="package"
        />
        -->
        <html outfile="../${emma.dir}/coverage.html"
             depth="method"
             columns="name,class,method,block,line"
        />
      </report>
    </emma>
  </target>
<!-- ========= END OF FILE ========================================== -->



