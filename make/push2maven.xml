<?xml version="1.0"?>
<!DOCTYPE project [
  <!ENTITY maven        SYSTEM "xmls/maven.xml">
  <!ENTITY upload2maven SYSTEM "xmls/upload2maven.xml">
]>

<!-- ==================	@author harsha.godugu@sun ===========  -->
<!-- =================== Build for PROJECT =================== -->

<project name="Glassfish corba "  basedir="." 
		xmlns:artifact="urn:maven-artifact-ant" >

<!-- ================= Properties   =================================== -->
<property name="maven.ant.file" value="maven-ant-tasks-2.0.8.jar"/>
<property name="maven.ant.dir"  value="http://apache.hoxt.com/maven/binaries"/>
<property name="lib.dir"  value="${root.dir}/lib"/>
<property name="build.dir"  value="${root.dir}/build"/>
<property name="releaselib.dir"  value="${build.dir}/release/lib"/>
<property name="ver.number"  value="${release.version}"/>
<property name="build.number"  value="${build.version}"/>

<!--  ====== release these for testing  =======
<property name="ver.number"  value="v3"/>
<property name="build.number"  value="test"/>
-->

<!-- ===   destination for the upload - location of corba maven repo ===  -->
<property name="repo.url" value="java-net:/maven2-repository/trunk/www/repository"/>
<!-- only for testing : file based url for testing the upload of jars  -->
<property name="file.url" value="file:/tmp/test/lib/jars"/>


<!--  the name of the jar file to be pushed -->
<property name="peorb"   value="glassfish-corba-peorb"/>
<property name="omgapi"  value="glassfish-corba-omgapi"/>
<property name="orblib"  value="glassfish-corba-orblib"/>
<property name="idlj"    value="glassfish-corba-idlj"/>

<!--  
Below: A temporary file to store the pom; Remember maven is based on 'single 
project produces single jar file. But, we are producing 4 jars from a single 
project. Hence,we are having a template to store pom and modify it each time 
we do the push.
Refer: http://maven.apache.org/guides/mini/guide-using-one-source-directory.html
Section: Producing Multiple JARs from a single POM (maven limitations)
-->
<property name="pom.template" value="${root.dir}/make/corba.template.pom"/>
<property name="peorb.template" value="${root.dir}/make/peorb.template.pom"/>
<property name="orblib.template" value="${root.dir}/make/orblib.template.pom"/>
<property name="idlj.template" value="${root.dir}/make/idlj.template.pom"/>
<property name="omgapi.template" value="${root.dir}/make/omgapi.template.pom"/>
<property name="corba.temp.pom" value="${root.dir}/make/corba.temp.pom"/>

<!-- ================================================================== -->
<!-- Set current date/time in case, if we decide to timestamp -->
<tstamp>
    <format property="TODAY_LONG"  pattern="EEE MMM d HH:mm:ss z yyyy"/>
    <format property="TODAY_SHORT" pattern="yyyy-MM-dd"/>
</tstamp>

<!-- ================================================================== -->
<!--      Bootstrap - a task getting here the Maven-Ant library         -->
<!-- ================================================================== -->
<target name="bootstrap" 
	description="Fetch Maven library - needed only the first time.">
   <get
       src="${maven.ant.dir}/${maven.ant.file}"
       dest="${lib.dir}/${maven.ant.file}"
       verbose="true"
       usetimestamp="true"/>
</target>

<!-- ================================================================== -->
<target name="testAntJar"
    description="Check if the mavn-ant-tasks jar is already present in the lib dir.. .">
    <condition property="maven.lib.present">
       <available file="${lib.dir}/${maven.ant.file}"/>
    </condition>
</target>

<!-- ================================================================== -->
<target name="checkmaven" depends="testAntJar"  unless="maven.lib.present">
    <echo>
        Missing ${maven.ant.file} library. 
	It can be fetched from the Internet by giving 
	the command "ant bootstrap"
     </echo>
     <echo message="I'm getting it from internet for You!"/>
     <antcall target="bootstrap"/>
</target>

<!-- ================================================================== -->
<target name="mavenize" depends="checkmaven" description="initialize maven ">
    <path id="maven-ant-tasks.classpath" 
	  path="${lib.dir}/${maven.ant.file}" />
    <typedef resource="org/apache/maven/artifact/ant/antlib.xml" 
        uri="urn:maven-artifact-ant" classpathref="maven-ant-tasks.classpath">
    </typedef>
    <!-- ============Download the SVN provider ====================== -->
    <artifact:install-provider artifactId="wagon-svn" groupId="org.jvnet.wagon-svn" version="1.7">
    <artifact:remoteRepository id="java.net.maven2.repository" url="http://download.java.net/maven/2/" />
    <!-- store the provider in temp local repository-->
    <artifact:localRepository path="/tmp/test"/>
    </artifact:install-provider>
</target>

<!-- ================================================================== -->
<target name="push-corba" depends="push-peorb, push-orblib, push-omgapi, push-idlj"
    description="Deploy glassfish-corba jars to maven2 repository">
   <echo message="Uploading corba jar files to maven repo done!"/>
   <echo message="Version of the build being pushed...  ${ver.number}"/>
   <echo message="Build number: ${build.number} "/>
   <echo message="time-stamp: ${TODAY_LONG}"/>
</target>

<!-- 
<target name="test-loadfile">
    <loadfile property="dependency" srcFile="make/dependency.template.xml">
        <filterchain>
            <replacetokens>
                <token key="artifactId" value="codegen"/>
                <token key="version" value="10.1.2"/>
            </replacetokens>
        </filterchain>
    </loadfile>
    <echo message="${dependency}"/>
    <sequential>
        <property name="dependencies" value="orb,codegen,asm"/>
        <foreach list="${dependencies}" target="test-chain" name="foo"/>
    </sequential>
</target>

<target name="test-chain">
</target>

naming conventions:
The modules:
    asm                 
    codegen
    dynamicany
    naming
    newtimer
    omgapi-extension
    orb
    orbgeneric
    orbtransactions
    Should these module names be prefixed with glassfish-corba?

    for each module m:
        ${root.dir}/make/${m}.bnd
        ${root.dir}/make/${m}.template.pom
        ${releaselib.dir}/bundles/${m}.jar

<macrodef name="make-file">
    <attribute name="file"/>
    <attribute name="target"/>
    <element name="dependencies"/>
    <copy file="${file}" tofile="${target}" overwrite="true">
        <filterset>
          <filter token="jarName" value="${module}" />
          <filter token="version" value="${ver.number}-${build.number}" />
          <filter token="jarDescription" value="${description}" />
          <dependencies/>
        </filterset>
    </copy>
</macrodef>

<macrodef name="push-to-maven">
    <attribute name="module"/>
    <attribute name="description"/>
    <element name="dependencies"/>
    <sequential>
        <make-file file="${root.dir}/make/${module}.template.pom" target="${corba.temp.pom}">
            <dependencies/>
        </make-file>

        <artifact:pom id="glassfish.corba.project" file="${corba.temp.pom}" />
        <artifact:deploy file="${releaselib.dir}/bundles/${module}.jar">
            <remoteRepository url="${repo.url}">
            </remoteRepository>
            <pom refid="glassfish.corba.project"/>
        </artifact:deploy>
        <delete file="${corba.temp.pom}" verbose="true"/>
    </sequential>
</macrodef>

<push-to-maven module="orb" description="The main GlassFish ORB module">
    <dependencies>
        <dependency module="codegen"/>
        <dependency module="orbgeneric"/>
        <dependency module="newtimer"/>
        <dependency module="omgapi-ext"/>
    </dependencies>
</push-to-maven>

-->

<!-- ========  publish peorb.jar with a POM file ====================== -->
<target name="push-peorb" depends="mavenize">
    <copy file="${peorb.template}"  tofile="${corba.temp.pom}" overwrite="true">
        <filterset>
          <filter token="jarName" value="${peorb}" />
	  <filter token="OMGAPI" value="${omgapi}" />
          <filter token="ORBLIB" value="${orblib}" />
          <filter token="IDLJ" value="${idlj}" />
          <filter token="version" value="${ver.number}-${build.number}" />
          <filter token="jarDescription" value="Glassfish ORB implementation" />
          <!-- add more filters for any other data like timestamps etc -->
        </filterset>
    </copy>

    <artifact:pom id="glassfish.corba.project" file="${corba.temp.pom}" />
    <artifact:deploy file="${releaselib.dir}/peorb.jar">
        <remoteRepository url="${repo.url}">
        </remoteRepository>
        <pom refid="glassfish.corba.project"/>
    </artifact:deploy>
    <delete file="${corba.temp.pom}" verbose="true"/>
</target>

<!-- ========  publish omgapi.jar with a POM file ===================== -->
<target name="push-omgapi" depends="mavenize">
    <copy file="${omgapi.template}"  tofile="${corba.temp.pom}" overwrite="true">
        <filterset>
          <filter token="jarName" value="${omgapi}" />
          <filter token="version" value="${ver.number}-${build.number}" />
          <filter token="jarDescription" value="OMG APIs alone" />
          <!-- add more filters for any other data like timestamps etc -->
        </filterset>
    </copy>

    <artifact:pom id="glassfish.corba.project" file="${corba.temp.pom}" />
    <artifact:deploy file="${releaselib.dir}/omgapi.jar">
        <remoteRepository url="${repo.url}">
        </remoteRepository>
        <pom refid="glassfish.corba.project"/>
    </artifact:deploy>
    <delete file="${corba.temp.pom}" verbose="true"/>
</target>

<!-- ========  publish orblib.jar with a POM file ===================== -->
<target name="push-orblib" depends="mavenize">
    <copy file="${orblib.template}"  tofile="${corba.temp.pom}" overwrite="true">
        <filterset>
          <filter token="jarName" value="${orblib}" />
          <filter token="version" value="${ver.number}-${build.number}" />
	  <filter token="OMGAPI" value="${omgapi}" />
          <filter token="jarDescription" value="asm implementation " />
          <!-- add more filters for any other data like timestamps etc -->
        </filterset>
    </copy>

    <artifact:pom id="glassfish.corba.project" file="${corba.temp.pom}" />
    <artifact:deploy file="${releaselib.dir}/orblib.jar">
        <remoteRepository url="${repo.url}">
        </remoteRepository>
        <pom refid="glassfish.corba.project"/>
    </artifact:deploy>
    <delete file="${corba.temp.pom}" verbose="true"/>
</target>

<!-- ========  publish idlj.jar with a POM file ======================= -->
<target name="push-idlj" depends="mavenize" >
    <copy file="${idlj.template}"  tofile="${corba.temp.pom}" overwrite="true">
        <!-- Insert the Version and Build numbers in the POM file -->
        <filterset>
          <filter token="jarName" value="${idlj}" />
          <filter token="version" value="${ver.number}-${build.number}" />
          <filter token="jarDescription" value="Sun's IDLJ idl to java impl.." />
          <!-- add more filters for any other data like timestamps etc -->
        </filterset>
    </copy>

    <artifact:pom id="glassfish.corba.project" file="${corba.temp.pom}" />
    <artifact:deploy file="${releaselib.dir}/idlj.jar">
        <remoteRepository url="${repo.url}">
        </remoteRepository>
        <pom refid="glassfish.corba.project"/>
    </artifact:deploy>
    <delete file="${corba.temp.pom}" verbose="true"/>
</target>

<!--
    <artifact:deploy file="${lib.dir}/${glasfish.corba.artifactId}.jar">
        <remoteRepository url="${corba.maven.repository}">
    <authentication username="${maven.auth.username}" privateKey="${maven.auth.privkey}"/>
-->

<!-- ===================  Maven 2.0 lib calls End ===================== -->
<!-- ==============    Just for testing...============================= -->
<target name="testing" depends="mavenize" >
    <echo message="Today is.. ${TODAY_LONG}"/>
    <echo message="Today long is..${TODAY_SHORT}"/>
    <echo message="Root dir is ${root.dir} " />
    <echo message="release dir is ${releaselib.dir} and build is  ${build.dir}" />
    <echo message="release number = ${release.version} build=${build.version}  buildNmbr=${build.number}"/>
</target>

</project>
